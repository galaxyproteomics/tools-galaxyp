{"version":3,"sources":["unipept-visualizations.js"],"names":[],"mappings":"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","file":"unipept-visualizations.es5.js","sourcesContent":["/*jshint -W079 */\nlet univis = univis || {};\n\nunivis.Node = class Node {\n    constructor(node = {}) {\n        this.data = {};\n        Object.assign(this, node);\n    }\n\n    static new(node = {}) {\n        return new Node(node);\n    }\n\n    static createNode(node, construct = Node.new) {\n        if (node.children) {\n            node.children = node.children.map(n => Node.createNode(n, construct));\n        }\n        return construct.call(null, node);\n    }\n\n    // sets a property for a node and all its children\n    setRecursiveProperty(property, value) {\n        this[property] = value;\n        if (this.children) {\n            this.children.forEach(c => {\n                c.setRecursiveProperty(property, value);\n            });\n        } else if (this._children) {\n            this._children.forEach(c => {\n                c.setRecursiveProperty(property, value);\n            });\n        }\n    }\n\n    // Returns true if a node is a leaf\n    isLeaf() {\n        return (!this.children && !this._children) ||\n            (this.children && this.children.length === 0) ||\n            (this._children && this._children.length === 0);\n    }\n\n    getHeight() {\n        if (this._height === undefined) {\n            if (this.isLeaf()) {\n                this._height = 0;\n            } else {\n                this._height = d3.max(this.children, c => c.getHeight()) + 1;\n            }\n        }\n        return this._height;\n    }\n\n    getDepth() {\n        if (this._depth === undefined) {\n            if (this.parent === undefined) {\n                this._depth = 0;\n            } else {\n                this._depth = this.parent.getDepth() + 1;\n            }\n        }\n        return this._depth;\n    }\n};\n;/**\n * Interactive treemap\n */\n(function () {\n    var TreeMap = function TreeMap(element, data, options = {}) {\n        let that = {};\n\n        const MARGIN = {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0\n            },\n            DEFAULTS = {\n                height: 300,\n                width: 600,\n\n                className: 'unipept-treemap',\n                levels: undefined,\n                getLevel: d => d.getDepth(),\n\n                countAccessor: d => d.data.self_count,\n                rerootCallback: undefined,\n\n                getBreadcrumbTooltip: d => d.name,\n                colorRoot: \"#104B7D\",\n                colorLeaf: \"#fdffcc\",\n                colorBreadcrumbs: \"#FF8F00\",\n\n                labelHeight: 10,\n                getLabel: d => d.name,\n\n                enableTooltips: true,\n                getTooltip: getTooltip,\n                getTooltipTitle: getTooltipTitle,\n                getTooltipText: getTooltipText\n            };\n\n        let settings;\n\n        let root,\n            nodeId = 0,\n            current,\n            treemapLayout,\n            breadcrumbs,\n            treemap,\n            tooltip,\n            colorScale;\n\n        /**\n         * Initializes Treemap\n         */\n        function init() {\n            settings = Object.assign({}, DEFAULTS, options);\n\n            root = TreemapNode.createNode(data);\n\n            settings.width = settings.width - MARGIN.right - MARGIN.left;\n            settings.height = settings.height - MARGIN.top - MARGIN.bottom;\n\n            settings.levels = settings.levels || root.getHeight();\n\n            if (settings.enableTooltips) {\n                initTooltip();\n            }\n\n            initCSS();\n\n            // setup the visualisation\n            draw(root);\n            reroot(root, false);\n        }\n\n        function initTooltip() {\n            tooltip = d3.select(\"body\")\n                .append(\"div\")\n                .attr(\"id\", element.id + \"-tooltip\")\n                .attr(\"class\", \"tip\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"10\")\n                .style(\"visibility\", \"hidden\")\n                .style(\"background-color\", \"white\")\n                .style(\"padding\", \"2px\")\n                .style(\"border\", \"1px solid #dddddd\")\n                .style(\"border-radius\", \"3px;\");\n        }\n\n        function initCSS() {\n            let elementClass = settings.className;\n            $(element).addClass(elementClass);\n            $(\"<style>\").prop(\"type\", \"text/css\")\n                .html(`\n                    .${elementClass} {\n                        font-family: Roboto,'Helvetica Neue',Helvetica,Arial,sans-serif;\n                    }\n                    .${elementClass} .node {\n                        font-size: 9px;\n                        line-height: 10px;\n                        overflow: hidden;\n                        position: absolute;\n                        text-indent: 2px;\n                        text-align: center;\n                        text-overflow: ellipsis;\n                        cursor: pointer;\n                    }\n                    .${elementClass} .node:hover {\n                        outline: 1px solid white;\n                    }\n                    .${elementClass} .breadcrumbs {\n                        font-size: 11px;\n                        line-height: 20px;\n                        padding-left: 5px;\n                        font-weight: bold;\n                        color: white;\n                        box-sizing: border-box;\n                    }\n                    .full-screen .${elementClass} .breadcrumbs {\n                        width: 100% !important;\n                    }\n                    .${elementClass} .crumb {\n                        cursor: pointer;\n                    }\n                    .${elementClass} .crumb .link:hover {\n                        text-decoration: underline;\n                    }\n                    .${elementClass} .breadcrumbs .crumb + .crumb::before {\n                        content: \" > \";\n                        cursor: default;\n                    }\n                `)\n                .appendTo(\"head\");\n        }\n\n        function draw(data) {\n            $(element).empty();\n\n            treemapLayout = d3.layout.treemap()\n                .size([settings.width + 1, settings.height + 1])\n                .padding([settings.labelHeight, 0, 0, 0])\n                .value(settings.countAccessor);\n\n            colorScale = d3.scale.linear()\n                .domain([0, settings.levels])\n                .range([settings.colorRoot, settings.colorLeaf])\n                .interpolate(d3.interpolateLab);\n\n            breadcrumbs = d3.select(element).append(\"div\")\n                .attr(\"class\", \"breadcrumbs\")\n                .style(\"position\", \"relative\")\n                .style(\"width\", settings.width + \"px\")\n                .style(\"height\", \"20px\")\n                .style(\"background-color\", settings.colorBreadcrumbs);\n\n            treemap = d3.select(element).append(\"div\")\n                .style(\"position\", \"relative\")\n                .style(\"width\", settings.width + \"px\")\n                .style(\"height\", settings.height + \"px\")\n                .style(\"left\", MARGIN.left + \"px\")\n                .style(\"top\", MARGIN.top + \"px\");\n        }\n\n        function setBreadcrumbs() {\n            let crumbs = [];\n            let temp = current;\n            while (temp) {\n                crumbs.push(temp);\n                temp = temp.parent;\n            }\n            crumbs.reverse();\n            breadcrumbs.html(\"\");\n            breadcrumbs.selectAll(\".crumb\")\n                .data(crumbs)\n                .enter()\n                .append(\"span\")\n                .attr(\"class\", \"crumb\")\n                .attr(\"title\", settings.getBreadcrumbTooltip)\n                .html(d => `<span class='link'>${d.name}</span>`)\n                .on(\"click\", d => {\n                    reroot(d);\n                });\n        }\n\n        function reroot(data, triggerCallback = true) {\n            current = data;\n\n            setBreadcrumbs();\n\n            let nodes = treemap.selectAll(\".node\")\n                .data(treemapLayout.nodes(data), d => d.id || (d.id = ++nodeId));\n\n            nodes.enter()\n                .append(\"div\")\n                .attr(\"class\", \"node\")\n                .style(\"background\", d => colorScale(settings.getLevel(d)))\n                .style(\"color\", d => getReadableColorFor(colorScale(settings.getLevel(d))))\n                .style(\"left\", \"0px\")\n                .style(\"top\", \"0px\")\n                .style(\"width\", \"0px\")\n                .style(\"height\", \"0px\")\n                .text(settings.getLabel)\n                .on(\"click\", d => {\n                    reroot(d);\n                })\n                .on(\"contextmenu\", d => {\n                    d3.event.preventDefault();\n                    if (current.parent) {\n                        reroot(current.parent);\n                    }\n                })\n                .on(\"mouseover\", tooltipIn)\n                .on(\"mousemove\", tooltipMove)\n                .on(\"mouseout\", tooltipOut);\n\n            nodes.order()\n                .transition()\n                .call(position);\n\n            nodes.exit().remove();\n\n            if (triggerCallback && settings.rerootCallback) {\n                settings.rerootCallback.call(null, current);\n            }\n        }\n\n        function update() {\n            let nodes = treemap.selectAll(\".node\")\n                .data(treemapLayout.nodes(data), d => d.id)\n                .order()\n                .transition()\n                .call(position);\n        }\n\n        /**\n         * sets the position of a square\n         */\n        function position() {\n            this.style(\"left\", d => d.x + \"px\")\n                .style(\"top\", d => d.y + \"px\")\n                .style(\"width\", d => Math.max(0, d.dx - 1) + \"px\")\n                .style(\"height\", d => Math.max(0, d.dy - 1) + \"px\");\n        }\n\n        /**\n         * Resizes the treemap for a given width and height\n         */\n        function resize(width, height) {\n            treemapLayout = d3.layout.treemap()\n                .size([width + 1, height + 1])\n                .padding([10, 0, 0, 0])\n                .value(settings.countAccessor);\n            update();\n        }\n\n        // tooltip functions\n        function tooltipIn(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.html(settings.getTooltip(d))\n                .style(\"top\", (d3.event.pageY - 5) + \"px\")\n                .style(\"left\", (d3.event.pageX + 15) + \"px\")\n                .style(\"visibility\", \"visible\");\n        }\n\n        function tooltipOut(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.style(\"visibility\", \"hidden\");\n        }\n\n        function tooltipMove(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.style(\"top\", (d3.event.pageY - 5) + \"px\")\n                .style(\"left\", (d3.event.pageX + 15) + \"px\");\n        }\n\n        function getTooltip(d) {\n            return `<h3 class='tip-title'>${settings.getTooltipTitle(d)}</h3><p>${settings.getTooltipText(d)}</p>`;\n        }\n\n        function getTooltipTitle(d) {\n            return d.name;\n        }\n\n        function getTooltipText(d) {\n            return `${d.data.count} hits`;\n        }\n\n        /*\n         * Returns the readable text color based on the brightness of a given backgroud color\n         */\n        function getReadableColorFor(color) {\n            let textColor = \"#000\";\n            try {\n                textColor = brightness(d3.rgb(color)) < 125 ? \"#eee\" : \"#000\";\n            } catch (err) {}\n            return textColor;\n        }\n\n        /*\n         * Returns the brightness of an rgb-color\n         * from: http:// www.w3.org/WAI/ER/WD-AERT/#color-contrast\n         */\n        function brightness(rgb) {\n            return rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114;\n        }\n\n        class TreemapNode extends univis.Node {\n            static new(node = {}) {\n                return new TreemapNode(node);\n            }\n\n            static createNode(node) {\n                return univis.Node.createNode(node, TreemapNode.new);\n            }\n        }\n\n\n        /*************** Public methods ***************/\n        /**\n         * Resets the treemap to its initial position\n         */\n        that.reset = function reset() {\n            reroot(root);\n        };\n\n        /**\n         * Sets the visualisation in full screen mode\n         *\n         * @param <boolean> isFullScreen indicates if we're in full screen mode\n         */\n        that.setFullScreen = function setFullScreen(isFullScreen) {\n            // the delay is because the event fires before we're in fullscreen\n            // so the height en width functions don't give a correct result\n            // without the delay\n            setTimeout(function () {\n                let [w, h] = [settings.width, settings.height];\n                if (isFullScreen) {\n                    w = $(window).width();\n                    h = $(window).height() - 44;\n                }\n                resize(w, h);\n            }, 1000);\n        };\n\n        // initialize the object\n        init();\n\n        return that;\n    };\n\n    function Plugin(userData, option) {\n        return this.each(function () {\n            let $this = $(this);\n            let data = $this.data('vis.treemap');\n            let options = $.extend({}, $this.data(), typeof option === 'object' && option);\n\n            if (!data) {\n                $this.data('vis.treemap', (data = new TreeMap(this, userData, options)));\n            }\n            if (typeof option === 'string') {\n                data[option]();\n            }\n        });\n    }\n\n    $.fn.treemap = Plugin;\n    $.fn.treemap.Constructor = TreeMap;\n})();\n;/**\n * Zoomable treeview, inspiration from\n * - http://bl.ocks.org/mbostock/4339083\n * - https://gist.github.com/robschmuecker/7880033\n * - http://www.brightpointinc.com/interactive/budget/index.html?source=d3js\n */\n(function () {\n    var TreeView = function TreeView(element, data, options = {}) {\n        let that = {};\n\n        const MARGIN = {\n                top: 5,\n                right: 5,\n                bottom: 5,\n                left: 5\n            },\n            DURATION = 750,\n            COLOR_SCALE = d3.scale.category10(),\n            DEFAULTS = {\n                height: 300,\n                width: 600,\n                nodeDistance: 180,\n                levelsToExpand: 2,\n                minNodeSize: 2,\n                maxNodeSize: 105,\n\n                countAccessor: d => d.data.count,\n\n                colors: d => COLOR_SCALE(d.name),\n                nodeFillColor: nodeFillColor,\n                nodeStrokeColor: nodeStrokeColor,\n                linkStrokeColor: linkStrokeColor,\n\n                enableInnerArcs: true,\n                enableExpandOnClick: true,\n                enableRightClick: true,\n\n                enableLabels: true,\n                getLabel: d => d.name,\n\n                enableTooltips: true,\n                getTooltip: getTooltip,\n                getTooltipTitle: getTooltipTitle,\n                getTooltipText: getTooltipText\n            };\n\n        let settings;\n\n        let visibleRoot,\n            tooltipTimer;\n\n        let nodeId = 0,\n            root;\n\n        let tree,\n            tooltip,\n            diagonal,\n            widthScale,\n            innerArc,\n            zoomListener,\n            svg;\n\n        function init() {\n            settings = Object.assign({}, DEFAULTS, options);\n\n            settings.width = settings.width - MARGIN.right - MARGIN.left;\n            settings.height = settings.height - MARGIN.top - MARGIN.bottom;\n\n            if (settings.enableTooltips) {\n                initTooltip();\n            }\n\n            if (settings.enableInnerArcs) {\n                initInnerArcs();\n            }\n\n            tree = d3.layout.tree()\n                .nodeSize([2, 10])\n                .separation((a, b) => {\n                    let width = (nodeSize(a) + nodeSize(b)),\n                        distance = width / 2 + 4;\n                    return (a.parent === b.parent) ? distance : distance + 4;\n                });\n\n            diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n            widthScale = d3.scale.linear().range([settings.minNodeSize, settings.maxNodeSize]);\n\n            // define the zoomListener which calls the zoom function on the \"zoom\" event constrained within the scaleExtents\n            zoomListener = d3.behavior.zoom()\n                .scaleExtent([0.1, 3])\n                .on(\"zoom\", () => {\n                    svg.attr(\"transform\", `translate(${d3.event.translate})scale(${d3.event.scale})`);\n                });\n\n            svg = d3.select(element).append(\"svg\")\n                .attr(\"version\", \"1.1\")\n                .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n                .attr(\"viewBox\", `0 0 ${settings.width + MARGIN.right + MARGIN.left} ${settings.height + MARGIN.top + MARGIN.bottom}`)\n                .attr(\"width\", settings.width + MARGIN.right + MARGIN.left)\n                .attr(\"height\", settings.height + MARGIN.top + MARGIN.bottom)\n                .call(zoomListener)\n                .append(\"g\")\n                .attr(\"transform\", `translate(${MARGIN.left},${MARGIN.top})`)\n                .append(\"g\");\n\n            draw(TreeviewNode.createNode(data));\n        }\n\n        function initTooltip() {\n            tooltip = d3.select(\"body\")\n                .append(\"div\")\n                .attr(\"id\", element.id + \"-tooltip\")\n                .attr(\"class\", \"tip\")\n                .style(\"position\", \"absolute\")\n                .style(\"z-index\", \"10\")\n                .style(\"visibility\", \"hidden\")\n                .style(\"background-color\", \"white\")\n                .style(\"padding\", \"2px\")\n                .style(\"border\", \"1px solid #dddddd\")\n                .style(\"border-radius\", \"3px;\");\n        }\n\n        function initInnerArcs() {\n            let arcScale = d3.scale.linear().range([0, 2 * Math.PI]);\n\n            innerArc = d3.svg.arc()\n                .outerRadius(nodeSize)\n                .startAngle(0)\n                .endAngle(d => arcScale(d.data.self_count / d.data.count) || 0);\n        }\n\n        function draw(data) {\n            widthScale.domain([0, data.data.count]);\n\n            root = data;\n            root.x0 = settings.height / 2;\n            root.y0 = 0;\n\n            // set everything visible\n            root.setSelected(true);\n\n            root.children.forEach((d, i) => {\n                d.color = d3.functor(settings.colors).call(this, d, i);\n                d.setRecursiveProperty(\"color\", d.color);\n            });\n\n            if (settings.enableExpandOnClick) {\n                root.collapseAll();\n                root.expand();\n            } else {\n                root.expandAll();\n            }\n\n            update(root);\n            centerNode(root);\n        }\n\n        function update(source) {\n            // Compute the new tree layout.\n            let nodes = tree.nodes(root).reverse(),\n                links = tree.links(nodes);\n\n            // Normalize for fixed-depth.\n            nodes.forEach(d => {\n                d.y = d.depth * settings.nodeDistance;\n            });\n\n            // Update the nodes…\n            let node = svg.selectAll(\"g.node\")\n                .data(nodes, d => d.id || (d.id = ++nodeId));\n\n            // Enter any new nodes at the parent's previous position.\n            let nodeEnter = node.enter().append(\"g\")\n                .attr(\"class\", \"node\")\n                .style(\"cursor\", \"pointer\")\n                .attr(\"transform\", d => `translate(${source.y || 0},${source.x0 || 0})`)\n                .on(\"click\", click)\n                .on(\"mouseover\", tooltipIn)\n                .on(\"mouseout\", tooltipOut)\n                .on(\"contextmenu\", rightClick);\n\n            nodeEnter.append(\"circle\")\n                .attr(\"r\", 1e-6)\n                .style(\"stroke-width\", \"1.5px\")\n                .style(\"stroke\", settings.nodeStrokeColor)\n                .style(\"fill\", settings.nodeFillColor);\n\n            if (settings.enableInnerArcs) {\n                nodeEnter.append(\"path\")\n                    .attr(\"d\", innerArc)\n                    .style(\"fill\", settings.nodeStrokeColor)\n                    .style(\"fill-opacity\", 0);\n            }\n\n            if (settings.enableLabels) {\n                nodeEnter.append(\"text\")\n                    .attr(\"x\", d => d.isLeaf() ? 10 : -10)\n                    .attr(\"dy\", \".35em\")\n                    .attr(\"text-anchor\", d => d.isLeaf() ? \"start\" : \"end\")\n                    .text(settings.getLabel)\n                    .style(\"font\", \"10px sans-serif\")\n                    .style(\"fill-opacity\", 1e-6);\n            }\n\n            // Transition nodes to their new position.\n            let nodeUpdate = node.transition()\n                .duration(DURATION)\n                .attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n            nodeUpdate.select(\"circle\")\n                .attr(\"r\", nodeSize)\n                .style(\"fill-opacity\", d => d._children ? 1 : 0)\n                .style(\"stroke\", settings.nodeStrokeColor)\n                .style(\"fill\", settings.nodeFillColor);\n\n            if (settings.enableLabels) {\n                nodeUpdate.select(\"text\")\n                    .style(\"fill-opacity\", 1);\n            }\n\n            if (settings.enableInnerArcs) {\n                nodeUpdate.select(\"path\")\n                    .duration(DURATION)\n                    .attr(\"d\", innerArc)\n                    .style(\"fill-opacity\", 0.8);\n            }\n\n            // Transition exiting nodes to the parent's new position.\n            let nodeExit = node.exit().transition()\n                .duration(DURATION)\n                .attr(\"transform\", d => `translate(${source.y},${source.x})`)\n                .remove();\n\n            nodeExit.select(\"circle\")\n                .attr(\"r\", 1e-6);\n\n            nodeExit.select(\"path\")\n                .style(\"fill-opacity\", 1e-6);\n\n            nodeExit.select(\"text\")\n                .style(\"fill-opacity\", 1e-6);\n\n            // Update the links…\n            let link = svg.selectAll(\"path.link\")\n                .data(links, d => d.target.id);\n\n            // Enter any new links at the parent's previous position.\n            link.enter().insert(\"path\", \"g\")\n                .attr(\"class\", \"link\")\n                .style(\"fill\", \"none\")\n                .style(\"stroke-opacity\", \"0.5\")\n                .style(\"stroke-linecap\", \"round\")\n                .style(\"stroke\", settings.linkStrokeColor)\n                .style(\"stroke-width\", 1e-6)\n                .attr(\"d\", d => {\n                    let o = {\n                        x: (source.x0 || 0),\n                        y: (source.y0 || 0)\n                    };\n                    return diagonal({\n                        source: o,\n                        target: o\n                    });\n                });\n\n            // Transition links to their new position.\n            link.transition()\n                .duration(DURATION)\n                .attr(\"d\", diagonal)\n                .style(\"stroke\", settings.linkStrokeColor)\n                .style(\"stroke-width\", d => {\n                    if (d.source.selected) {\n                        return widthScale(d.target.data.count) + \"px\";\n                    } else {\n                        return \"4px\";\n                    }\n                });\n\n            // Transition exiting nodes to the parent's new position.\n            link.exit().transition()\n                .duration(DURATION)\n                .style(\"stroke-width\", 1e-6)\n                .attr(\"d\", d => {\n                    let o = {\n                        x: source.x,\n                        y: source.y\n                    };\n                    return diagonal({\n                        source: o,\n                        target: o\n                    });\n                })\n                .remove();\n\n            // Stash the old positions for transition.\n            nodes.forEach(d => {\n                [d.x0, d.y0] = [d.x, d.y];\n            });\n        }\n\n        function nodeSize(d) {\n            if (d.selected) {\n                return widthScale(d.data.count) / 2;\n            } else {\n                return 2;\n            }\n        }\n\n        // Toggle children on click.\n        function click(d) {\n            if (!settings.enableExpandOnClick) {\n                return;\n            }\n\n            // check if click is triggered by panning on a node\n            if (d3.event.defaultPrevented) {\n                return;\n            }\n\n            if (d3.event.shiftKey) {\n                d.expandAll();\n            } else if (d.children) {\n                d.collapse();\n            } else {\n                d.expand();\n            }\n            update(d);\n            centerNode(d);\n        }\n\n        function rightClick(d) {\n            if (settings.enableRightClick) {\n                reroot(d);\n            }\n        }\n\n        // Sets the width of the right clicked node to 100%\n        function reroot(d) {\n            if (d === visibleRoot && d !== root) {\n                reroot(root);\n                return;\n            }\n            visibleRoot = d;\n\n            // set Selection properties\n            root.setSelected(false);\n            d.setSelected(true);\n\n            // scale the lines\n            widthScale.domain([0, d.data.count]);\n\n            d.expand();\n\n            // redraw\n            if (d3.event !== null) {\n                d3.event.preventDefault();\n            }\n            update(d);\n            centerNode(d);\n        }\n\n        // Center a node\n        function centerNode(source) {\n            let scale = zoomListener.scale(),\n                [x, y] = [-source.y0, -source.x0];\n            x = x * scale + settings.width / 4;\n            y = y * scale + settings.height / 2;\n            svg.transition()\n                .duration(DURATION)\n                .attr(\"transform\", `translate(${x},${y})scale(${scale})`);\n            zoomListener.scale(scale);\n            zoomListener.translate([x, y]);\n        }\n\n        // tooltip functions\n        function tooltipIn(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            tooltip.html(settings.getTooltip(d))\n                .style(\"top\", (d3.event.pageY - 5) + \"px\")\n                .style(\"left\", (d3.event.pageX + 15) + \"px\");\n\n            tooltipTimer = setTimeout(() => {\n                tooltip.style(\"visibility\", \"visible\");\n            }, 1000);\n\n        }\n\n        function tooltipOut(d, i) {\n            if (!settings.enableTooltips) {\n                return;\n            }\n            clearTimeout(tooltipTimer);\n            tooltip.style(\"visibility\", \"hidden\");\n        }\n\n        /************** Default methods ***************/\n        // set fill color\n        function nodeFillColor(d) {\n            if (d.selected) {\n                return d._children ? d.color || \"#aaa\" : \"#fff\";\n            } else {\n                return \"#aaa\";\n            }\n        }\n\n        // set node stroke color\n        function nodeStrokeColor(d) {\n            if (d.selected) {\n                return d.color || \"#aaa\";\n            } else {\n                return \"#aaa\";\n            }\n        }\n\n        // set link stroke color\n        function linkStrokeColor(d) {\n            if (d.source.selected) {\n                return d.target.color;\n            } else {\n                return \"#aaa\";\n            }\n        }\n\n        function getTooltip(d) {\n            return `<h3 class='tip-title'>${settings.getTooltipTitle(d)}</h3><p>${settings.getTooltipText(d)}</p>`;\n        }\n\n        function getTooltipTitle(d) {\n            return d.name;\n        }\n\n        function getTooltipText(d) {\n            return `${d.data.count} hits`;\n        }\n\n        class TreeviewNode extends univis.Node {\n            constructor(node = {}) {\n                super(node);\n                this.setCount();\n            }\n\n            static new(node = {}) {\n                return new TreeviewNode(node);\n            }\n\n            static createNode(node) {\n                return univis.Node.createNode(node, TreeviewNode.new);\n            }\n\n            setCount() {\n                if (settings.countAccessor(this)) {\n                    this.data.count = settings.countAccessor(this);\n                } else if (this.children) {\n                    this.data.count = this.children.reduce((sum, c) => sum + c.data.count, 0);\n                } else {\n                    this.data.count = 0;\n                }\n            }\n\n            setSelected(value) {\n                this.setRecursiveProperty(\"selected\", value);\n            }\n\n            // collapse everything\n            collapseAll() {\n                if (this.children && this.children.length === 0) {\n                    this.children = null;\n                }\n                if (this.children) {\n                    this._children = this.children;\n                    this._children.forEach(c => {\n                        c.collapseAll();\n                    });\n                    this.children = null;\n                }\n            }\n\n            // Collapses a node\n            collapse() {\n                if (this.children) {\n                    this._children = this.children;\n                    this.children = null;\n                }\n            }\n\n            expandAll() {\n                this.expand(100);\n            }\n\n            // Expands a node and its children\n            expand(i = settings.levelsToExpand) {\n                if (i > 0) {\n                    if (this._children) {\n                        this.children = this._children;\n                        this._children = null;\n                    }\n                    if (this.children) {\n                        this.children.forEach(c => {\n                            c.expand(i - 1);\n                        });\n                    }\n                }\n            }\n        }\n\n        /*************** Public methods ***************/\n        that.reset = function reset() {\n            zoomListener.scale(1);\n            reroot(root);\n        };\n\n        // initialize the object\n        init();\n\n        // return the object\n        return that;\n    };\n\n    function Plugin(userData, option) {\n        return this.each(function () {\n            let $this = $(this);\n            let data = $this.data('vis.treeview');\n            let options = $.extend({}, $this.data(), typeof option === 'object' && option);\n\n            if (!data) {\n                $this.data('vis.treeview', (data = new TreeView(this, userData, options)));\n            }\n            if (typeof option === 'string') {\n                data[option]();\n            }\n        });\n    }\n\n    $.fn.treeview = Plugin;\n    $.fn.treeview.Constructor = TreeView;\n})();\n"]}