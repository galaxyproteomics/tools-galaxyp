<tool id="pyprophet_peptide" name="PyProphet peptide" version="@VERSION@.0">
    <description>
    Peptide error-rate estimation
    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="aggressive">
    <![CDATA[
        pyprophet peptide
            --in='$input'
            --context=$context
            $parametric
            $pfdr
        --pi0_lambda=$pi0_lambda_start $pi0_lambda_end $pi0_lambda_steps
        --pi0_method=$pi0_method
        --pi0_smooth_df=$pi0_smooth_df
        $pi0_smooth_log
        $lfdr_truncate
        $lfdr_monotone
        --lfdr_transformation=$lfdr_transformation
        --lfdr_adj=$lfdr_adj
        --lfdr_eps=$lfdr_eps
        --out='./output.osw' && mv *_peptide.pdf peptide.pdf


    ]]>
    </command>
    <inputs>
        <param name="input" type="data" format="osw" label="Input file" help="This file needs to be in OSW format (--in)" />
        <param argument="--context" type="select" display="radio" label="Context to estimate protein-level FDR control" >
          <option value="run-specific" selected="True" >run-specific</option>
          <option value="experiment-wide">experiment-wide</option>
          <option value="global">global</option>
        </param>
<!-- sollte peptide-level FDR heiÃŸen?-->
        <param name="parametric" type="boolean" truevalue="--parametric" falsevalue="--no-parametric" label="Do parametric estimation of p-values" help="(--parametric / --no-parametric)"/>
        <param name="pfdr" type="boolean" truevalue="--pfdr" falsevalue="--no-pfdr" label="Compute positive false discovery rate (pFDR) instead of FDR" help="(--pfdr / --no-pfdr)"/>
        <param name="pi0_lambda_start" type="float" value="0.1" label="Use non-parametric estimation of p-values. Start value" help="(--pi0_lambda)"/>
        <param name="pi0_lambda_end" type="float" value="0.5" label="Use non-parametric estimation of p-values. End value" help="(--pi0_lambda)"/>
        <param name="pi0_lambda_steps" type="float" value="0.05" label="Use non-parametric estimation of p-values. Steps value" help="(--pi0_lambda)"/>
        <param argument="pi0_method" type="select" display="radio" label="Either 'smoother' or 'bootstrap'; the method for automatically choosing tuning parameter in the estimation of pi_0, the proportion of true null hypotheses" >
          <option value="bootstrap" selected="True" >bootstrap</option>
          <option value="smoother">smoother</option>
        </param>
        <param argument="--pi0_smooth_df" type="integer" value="3" label="Number of degrees-of-freedom to use when estimating pi_0 with a smoother" />
        <param name="pi0_smooth_log" type="boolean" truevalue="--pi0_smooth_log_pi0" falsevalue="--no-pi0_smooth_log_pi0" label="If True and pi0_method = 'smoother', pi0 will be estimated by applying a smoother to a scatterplot of log(pi0) estimates against the tuning parameter lambda" help="(--pi0_smooth_log_pi0 / --no-pi0_smooth_log_pi0)"/>
        <param name="lfdr_truncate" type="boolean" truevalue="--lfdr_truncate" falsevalue="--no-lfdr_truncate" checked="True" label="If True, local FDR values >1 are set to 1" help="(--lfdr_truncate / --no-lfdr_truncate)"/>
        <param name="lfdr_monotone" type="boolean" truevalue="--lfdr_monotone" falsevalue="--no-lfdr_monotone" checked="True" label="If True, local FDR values are non-decreasing with increasing p-values" help="(--lfdr_monotone / --no-lfdr_monotone)"/>
        <param argument="--lfdr_transformation" type="select" display="radio" label="Either a 'probit' or 'logit' transformation is applied to the p-values so that a local FDR estimate can be formed that does not involve edge effects of the [0,1] interval in which the p-values lie" >
          <option value="probit" selected="True" >probit</option>
          <option value="logit">logit</option>
        </param>
        <param argument="--lfdr_adj" type="float" value="1.5" label="Numeric value that is applied as a multiple of the smoothing bandwidth used in the density estimation" />
        <param argument="--lfdr_eps" type="float" value="1e-08" label="Numeric value that is threshold for the tails of the empirical p-value distribution" />
    </inputs>
    <outputs>
        <data name="peptide_plots" format="pdf" label="${tool.name} on ${on_string}: peptides.pdf" from_work_dir="peptide.pdf" />
        <data name="output" format="osw" label="${tool.name} on ${on_string}: peptide.osw" from_work_dir="output.osw" />
    </outputs>
    <tests>
        <test expect_num_outputs="2">
            <param name="input" value="score.osw" ftype="osw" />
            <param name="context" value="experiment-wide" />
            <output name="output" file="peptide1.osw" compare="sim_size" />
            <output name="peptide_plots" file="peptide1.pdf" compare="sim_size" />
        </test>
        <test expect_num_outputs="2">
            <param name="input" value="peptide1.osw" ftype="osw" />
            <param name="context" value="global" />
            <output name="output" file="peptide2.osw" compare="sim_size" />
            <output name="peptide_plots" file="peptide2.pdf" compare="sim_size" />
        </test>
    </tests>
    <help>
<![CDATA[
**What it does**

PyProphet: Semi-supervised learning and scoring of OpenSWATH results.

Infer peptides and conduct error-rate estimation in different contexts.

PyProphet is a Python re-implementation of the mProphet algorithm (Reiter 2010 Nature Methods) optimized for SWATH-MS data acquired by data-independent acquisition (DIA). The algorithm was originally published in (Telemann 2014 Bioinformatics) and has since been extended to support new data types and analysis modes (Rosenberger 2017, Nature biotechnology and Nature methods).

For more information, visit @link@

]]>
    </help>
    <expand macro="citations"/>
</tool>
