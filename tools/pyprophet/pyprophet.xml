<tool id="gp_pyprophet" name="PyProphet" version="0.1.0">
    <description></description>
    <requirements>
        <requirement type="package" version="0.3.2">pyprophet</requirement>
    </requirements>
    <command>
<![CDATA[
        pyprophet
            --apply_scorer $scorer
            --apply_weights $weights
            --num_processes "\${GALAXY_SLOTS:-24}"
            $compute_prop
            $use_all_groups
            $ignore_nan
            $random
            --final_statistics.lambda $lambda
            --semi_supervised_learner.initial_fdr $initial_fdr
            --semi_supervised_learner.initial_lambda $iteration_lambda
            --semi_supervised_learner.iteration_fdr $iteration_fdr
            --semi_supervised_learner.iteration_lambda $iteration_lambda
            --semi_supervised_learner.num_iter $num_iter
            --xeval.fraction $xeval_fraction
            --xeval.num_iter $xeval_num_iter

            ${input}

]]>
    </command>
    <inputs>
        <param name="input" format="txt" type="data" label="Input files" help="" />
        <param name="scorer" format="txt" type="data" optional="True" label="File of existing classifier"
            help="(--apply_scorer)" />
        <param name="weights" format="txt" type="data" optional="True" label="File of existing LDA weights"
            help="(--apply_weights)" />

        <param name="lambda" type="float" value="0.4" label="Final statistics lambda" help="(--final_statistics.lambda)" />
        <param name="initial_fdr" type="float" value="0.15" label="Semi supervised learner initial fdr"
            help="(--semi_supervised_learner.initial_fdr)" />
        <param name="initial_lambda" type="float" value="0.4" label="Semi supervised learner initial lambda"
            help="(--semi_supervised_learner.initial_lambda)" />
        <param name="iteration_fdr" type="float" value="0.02" label="Semi supervised learner iteration fdr"
            help="(--semi_supervised_learner.iteration_fdr)" />
        <param name="iteration_lambda" type="float" value="0.4" label="Semi supervised learner iteration lambda"
            help="(--semi_supervised_learner.iteration_lambda)" />
        <param name="num_iter" type="integer" value="5" label="Semi supervised learner num iter"
            help="(--semi_supervised_learner.num_iter)" />
        <param name="xeval_fraction" type="float" value="0.5" label="Xeval fraction"
            help="(--xeval.fraction)" />
        <param name="xeval_num_iter" type="integer" value="5" label="Xeval num iter"
            help="(--xeval.num_iter)" />
        <param name="random" type="boolean" truevalue="--is_test" falsevalue="" checked="False"
            label="Do not use random seed" help="(--is_test)" />
        <param name="ignore_nan" type="boolean" truevalue="--ignore.invalid_score_columns" falsevalue="" checked="False"
            label="Ignore score columns which only contain NaN or infinity values" help="(--ignore.invalid_score_columns)" />
        <param name="use_all_groups" type="boolean" truevalue="--final_statistics.fdr_all_pg" falsevalue="" checked="False"
            label="Use all peak groups for score and q-value calculation" help="(--final_statistics.fdr_all_pg)" />
        <param name="compute_prop" type="boolean" truevalue="--compute.probabilities" falsevalue="" checked="False"
            label="Compute approximate binned probability values" help="(--compute.probabilities)" />

    </inputs>
    <outputs>
        <data format="tabular" name="output" />
    </outputs>
  <help>
<![CDATA[
**What it does**

The algorithm can take targeted proteomics data, learn a linear separation between true signal and the noise signal and then compute a q-value (false discovery rate) to achieve experiment-wide cutoffs. 

This program is a reimplementation of the original algorithm by `Uwe Schmitt`_.

..`Uwe Schmitt`: https://github.com/uweschmitt/pyprophet

]]>
    </help>
    <citations>
        <citation type="doi">10.1038/nmeth.1584</citation>
    </citations>
</tool>
