<tool id="i2nca_cp_2_pc" name="i2nca Convert ContinuousProfile" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@">
    <description>
        Convert profile imzML files with i2nca and m2aia to obtain processed centroid files.

    </description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <container type="docker">@BIOCONTAINER_VERSION@</container>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
    cp '${infile.extra_files_path}/imzml' indata.imzML &&
    cp '${infile.extra_files_path}/ibd' indata.ibd &&

    #if $choose_strategy.strategy == 'set_find_peaks':

        #if $m2aia.use_m2aia_preproc == 'FALSE':
            'i2nca_convert_to_pc' 'indata.imzML' './outdata' '$choose_strategy.strategy' '--fp_hei' '$choose_strategy.fp_hei' '--fp_dis' '$choose_strategy.fp_dis' '--fp_pro' '$choose_strategy.fp_pro' '--fp_thr' '$choose_strategy.fp_thr' '--fp_wid' '$choose_strategy.fp_wid' '--fp_wlen' '$choose_strategy.fp_wlen' '--fp_rhei' '$choose_strategy.fp_rhei' '--fp_pla' '$choose_strategy.fp_pla'  &&

            mkdir $outfile_imzml.files_path &&

            mv ./outdata_conv_output_proc_centroid.imzML '${os.path.join($outfile_imzml.files_path, 'imzml')}' | true &&
            mv ./outdata_conv_output_proc_centroid.ibd '${os.path.join($outfile_imzml.files_path, 'ibd')}' | true &&

            echo 'imzML file:' > $outfile_imzml &&
            ls -l '$outfile_imzml.files_path' >> $outfile_imzml

        #else if $m2aia.use_m2aia_preproc == 'TRUE': 
            'i2nca_convert_to_pc' 'indata.imzML' './outdata' '$choose_strategy.strategy' '--fp_hei' '$choose_strategy.fp_hei' '--fp_dis' '$choose_strategy.fp_dis' '--fp_pro' '$choose_strategy.fp_pro' '--fp_thr' '$choose_strategy.fp_thr' '--fp_wid' '$choose_strategy.fp_wid' '--fp_wlen' '$choose_strategy.fp_wlen' '--fp_rhei' '$choose_strategy.fp_rhei' '--fp_pla' '$choose_strategy.fp_pla' @M2AIA_PARAMETERS@ &&

            mkdir $outfile_imzml.files_path &&

            mv ./outdata_conv_output_proc_centroid.imzML '${os.path.join($outfile_imzml.files_path, 'imzml')}' | true &&
            mv ./outdata_conv_output_proc_centroid.ibd '${os.path.join($outfile_imzml.files_path, 'ibd')}' | true &&

            echo 'imzML file:' > $outfile_imzml &&
            ls -l '$outfile_imzml.files_path' >> $outfile_imzml

        #end if
    #end if

    #if $choose_strategy.strategy == 'set_find_peaks_simple':

        #if $m2aia.use_m2aia_preproc == 'FALSE':
            'i2nca_convert_to_pc' 'indata.imzML' './outdata' '$choose_strategy.strategy' '--fp_hei' '$choose_strategy.fp_hei' '--fp_pro' '$choose_strategy.fp_pro'  &&

            mkdir $outfile_imzml.files_path &&

            mv ./outdata_conv_output_proc_centroid.imzML '${os.path.join($outfile_imzml.files_path, 'imzml')}' | true &&
            mv ./outdata_conv_output_proc_centroid.ibd '${os.path.join($outfile_imzml.files_path, 'ibd')}' | true &&

            echo 'imzML file:' > $outfile_imzml &&
            ls -l '$outfile_imzml.files_path' >> $outfile_imzml

        #else if $m2aia.use_m2aia_preproc == 'TRUE': 
            'i2nca_convert_to_pc' 'indata.imzML' './outdata' '$choose_strategy.strategy' '--fp_hei' '$choose_strategy.fp_hei' '--fp_pro' '$choose_strategy.fp_pro'  @M2AIA_PARAMETERS@ &&

            mkdir $outfile_imzml.files_path &&

            mv ./outdata_conv_output_proc_centroid.imzML '${os.path.join($outfile_imzml.files_path, 'imzml')}' | true &&
            mv ./outdata_conv_output_proc_centroid.ibd '${os.path.join($outfile_imzml.files_path, 'ibd')}' | true &&

            echo 'imzML file:' > $outfile_imzml &&
            ls -l '$outfile_imzml.files_path' >> $outfile_imzml

        #end if
    #end if

    #if $choose_strategy.strategy == 'set_find_peaks_cwt':
        #if $m2aia.use_m2aia_preproc == 'FALSE':

            'i2nca_convert_to_pc' 'indata.imzML' './outdata' '$choose_strategy.strategy' '--cwt_wid' '$choose_strategy.cwt_wid' '--cwt_snr' '$choose_strategy.cwt_snr' '--cwt_nper' '$choose_strategy.cwt_nper' '--cwt_win' '$choose_strategy.cwt_win' &&

            mkdir $outfile_imzml.files_path &&

            mv ./outdata_conv_output_proc_centroid.imzML '${os.path.join($outfile_imzml.files_path, 'imzml')}' | true &&
            mv ./outdata_conv_output_proc_centroid.ibd '${os.path.join($outfile_imzml.files_path, 'ibd')}' | true &&

            echo 'imzML file:' > $outfile_imzml &&
            ls -l '$outfile_imzml.files_path' >> $outfile_imzml

        #else if $m2aia.use_m2aia_preproc == 'TRUE':

            'i2nca_convert_to_pc' 'indata.imzML' './outdata' '$choose_strategy.strategy' '--cwt_wid' '$choose_strategy.cwt_wid' '--cwt_snr' '$choose_strategy.cwt_snr' '--cwt_nper' '$choose_strategy.cwt_nper' '--cwt_win' '$choose_strategy.cwt_win' @M2AIA_PARAMETERS@ &&

            mkdir $outfile_imzml.files_path &&

            mv ./outdata_conv_output_proc_centroid.imzML '${os.path.join($outfile_imzml.files_path, 'imzml')}' | true &&
            mv ./outdata_conv_output_proc_centroid.ibd '${os.path.join($outfile_imzml.files_path, 'ibd')}' | true &&

            echo 'imzML file:' > $outfile_imzml &&
            ls -l '$outfile_imzml.files_path' >> $outfile_imzml
        #end if
    #end if
    ]]></command>
    <inputs>
        <param name="infile" type="data" format="imzml" label="MSI data" help="Load the imzml file (as imzml Composite)"/>
        <conditional name="choose_strategy">
            <param name="strategy" label="Choose how the centroids in the imzML file should be detected:" type="select" help="Different stategies can be used.">
                <option value="set_find_peaks">Find peaks with local maxima</option>
                <option value="set_find_peaks_simple">Find peaks with local maxima (reduced parameters)</option>
                <option value="set_find_peaks_cwt">Find peaks with continuous wavelet transformation</option>
            </param>
            <when value="set_find_peaks">
                <param name="fp_hei" label="Required heith of peak:" type="float" value="20" help="Required heith of data point in the spectrum to be considered as peak"/>
                <param name="fp_dis" label="Required minimal horizontal distance:" type="float" value="3" min="1" help="The minimal horizontal distance between neighbouring peaks, in data points"/>
                <param name="fp_pro" label="Required prominence of peaks:" type="float" value="0.2" help="The prominence of peaks, in data points"/>
                <param name="fp_thr" label="Required threshold between peaks:" type="float" value="0.3" help="The vertical distance to neighboring samples, in data points"/>
                <param name="fp_wid" label="Required width of peak in samples:" type="float" value="5" help="The width of peak in samples, in data points"/>
                <param name="fp_wlen" label="Parameter for peak prominence:" type="integer" value="2" help="Used to calculate the peak prominence"/>
                <param name="fp_rhei" label="Relative peak height:" type="float" value="0.2" help="The relative heights of peaks in samples,"/>
                <param name="fp_pla" label="Size of flat top of peak:" type="float" value="3" help="Parameter for flat-topped peaks"/>
            </when>
            <when value="set_find_peaks_simple">
                <param name="fp_hei" label="Required heith of peak:" type="float" value="20" help="Required heith of data point in the spectrum to be considered as peak"/>
                <param name="fp_pro" label="Required prominence of peaks:" type="float" value="0.2" help="The prominence of peaks, in data points"/>
            </when>
            <when value="set_find_peaks_cwt">
                <param name="cwt_wid" label="Single width for CWT matrix:" type="float" value="5" help="Single width to use for calculating the Continuous Wavelet Transform (CWT) matrix"/>
                <param name="cwt_snr" label="Minimum SNR ratio:" type="float" value="3.0" help="Minimum signal-to-noise ratio (SNR) for peak detection"/>
                <param name="cwt_nper" label="Noise floor percentile:" type="float" value="10.0" help="Percentile of data points below which to consider as noise when calculating the noise floor"/>
                <param name="cwt_win" label="Noise floor calculation window size:" type="integer" value="40" help="Size of the window used to calculate the noise floor"/>
            </when>
        </conditional>
        <expand macro="m2aia_preprocessing"/>
    </inputs>
    <outputs>
        <data format="imzml" name="outfile_imzml" label="ProcessedCentroid imzML, Conversion result of ${on_string}: imzML"/>
    </outputs>
    <tests>
        <!-- Test 1: Conversion using loc max with some param-->
        <test>
            <expand macro="cp_infile"/>
            <conditional name="choose_strategy">
                <param name="strategy" value="set_find_peaks_simple"/>
                <param name="fp_hei" value="10.5"/>
                <param name="fp_pro" value="0.75"/>
            </conditional>
            <conditional name="m2aia">
                <param name="use_m2aia_preproc" value="FALSE"/>
            </conditional>
            <output name="outfile_imzml" ftype="imzml">
                <extra_files type="file" file="cp_test1.imzml" name="imzml" lines_diff="6"/>
                <extra_files type="file" file="cp_test1.ibd" name="ibd" compare="sim_size"/>
            </output>
        </test>
        <!-- Test 2: Conversion using full fp-->
        <test>
            <expand macro="pp_infile"/>
            <conditional name="choose_strategy">
                <param name="strategy" value="set_find_peaks"/>
                <param name="fp_hei" value="20"/>
                <param name="fp_dis" value="10"/>
                <param name="fp_pro" value="0.5"/>
                <param name="fp_thr" value="2"/>
                <param name="fp_wid" value="2"/>
                <param name="fp_wlen" value="3"/>
                <param name="fp_rhei" value="1"/>
                <param name="fp_pla" value="1"/>
            </conditional>
            <conditional name="m2aia">
                <param name="use_m2aia_preproc" value="FALSE"/>
            </conditional>
            <output name="outfile_imzml" ftype="imzml">
                <extra_files type="file" file="cp_test2.imzml" name="imzml" lines_diff="6"/>
                <extra_files type="file" file="cp_test2.ibd" name="ibd" compare="sim_size"/>
            </output>
        </test>
        <!-- Test 3: Conversion using full cwt-->
        <test>
            <expand macro="cp_infile"/>
            <conditional name="choose_strategy">
                <param name="strategy" value="set_find_peaks_cwt"/>
                <param name="cwt_wid" value="8"/>
                <param name="cwt_snr" value="3"/>
                <param name="cwt_nper" value="10"/>
                <param name="cwt_win" value="20"/>
            </conditional>
            <conditional name="m2aia">
                <param name="use_m2aia_preproc" value="FALSE"/>
            </conditional>
            <output name="outfile_imzml" ftype="imzml">
                <extra_files type="file" file="cp_test3.imzml" name="imzml" lines_diff="6"/>
                <extra_files type="file" file="cp_test3.ibd" name="ibd" compare="sim_size"/>
            </output>
        </test>
        <!-- Test 4: Conversion using loc max with m2aia preprocessing -->
        <test>
            <expand macro="pp_infile"/>
            <conditional name="choose_strategy">
                <param name="strategy" value="set_find_peaks_simple"/>
                <param name="fp_hei" value="20"/>
                <param name="fp_pro" value="0.2"/>
            </conditional>
            <conditional name="m2aia">
                <param name="use_m2aia_preproc" value="TRUE"/>
                <param name="nor" value="None"/>
                <param name="itr" value="None"/>
                <param name="bsl_hws" value="15"/>
                <param name="bsl" value="Median"/>
                <param name="smo_hws" value="5"/>
                <param name="smo" value="SavitzkyGolay"/>
            </conditional>
            <output name="outfile_imzml" ftype="imzml">
                <extra_files type="file" file="cp_test4.imzml" name="imzml" lines_diff="6"/>
                <extra_files type="file" file="cp_test4.ibd" name="ibd" compare="sim_size"/>
            </output>
        </test>
        <!-- Test 5: Conversion using fixed binning with m2aia preprocessing -->
        <test>
            <expand macro="pp_infile"/>
            <conditional name="choose_strategy">
                <param name="strategy" value="set_find_peaks"/>
                <param name="fp_hei" value="0.5"/>
                <param name="fp_dis" value="10"/>
                <param name="fp_pro" value="0.5"/>
                <param name="fp_thr" value="2"/>
                <param name="fp_wid" value="2"/>
                <param name="fp_wlen" value="3"/>
                <param name="fp_rhei" value="1"/>
                <param name="fp_pla" value="1"/>
            </conditional>
            <conditional name="m2aia">
                <param name="use_m2aia_preproc" value="TRUE"/>
                <param name="nor" value="None"/>
                <param name="itr" value="None"/>
                <param name="bsl_hws" value="15"/>
                <param name="bsl" value="Median"/>
                <param name="smo_hws" value="5"/>
                <param name="smo" value="SavitzkyGolay"/>
            </conditional>
            <output name="outfile_imzml" ftype="imzml">
                <extra_files type="file" file="cp_test5.imzml" name="imzml" lines_diff="6"/>
                <extra_files type="file" file="cp_test5.ibd" name="ibd" compare="sim_size"/>
            </output>
        </test>
        <!-- Test 6: m2aia preprocessing with cwt -->
        <test>
            <expand macro="cp_infile"/>
            <conditional name="choose_strategy">
                <param name="strategy" value="set_find_peaks_cwt"/>
                <param name="cwt_wid" value="8"/>
                <param name="cwt_snr" value="3"/>
                <param name="cwt_nper" value="10"/>
                <param name="cwt_win" value="20"/>
            </conditional>
            <conditional name="m2aia">
                <param name="use_m2aia_preproc" value="TRUE"/>
                <param name="nor" value="None"/>
                <param name="itr" value="None"/>
                <param name="bsl_hws" value="32"/>
                <param name="bsl" value="Median"/>
                <param name="smo_hws" value="64"/>
                <param name="smo" value="SavitzkyGolay"/>
            </conditional>
            <output name="outfile_imzml" ftype="imzml">
                <extra_files type="file" file="cp_test6.imzml" name="imzml" lines_diff="6"/>
                <extra_files type="file" file="cp_test6.ibd" name="ibd" compare="sim_size"/>
            </output>
        </test>
    </tests>
    <help><![CDATA[
        
    @I2NCA_DESCRIPTION@

This tool performs the internal conversion from a ContinuousProfile imzml file to a ProcessedCentroid imzml file.
It can also perform basic peak detection on ProcessedProfile imzml files.


**Input data**


@MSIDATA_INPUT_DESCRIPTION@


**Conversion strategy**


The conversion is achieved by using different peak detection methods.
    - Find peaks with local maxima: A local maxima algorithm that finds the maxima based on the set of provided criteria. 
    - Find peaks with continuous wavelet transformation: An implementation of the cwt Algorithm to detect sharp peaks among noisy data. 

@M2AIA_INPUT_DESCRIPTION@
]]></help>
    <citations>
        <expand macro="citation_i2nca"/>
        <expand macro="citation_m2aia"/>
        <citation type="bibtex">
            @article{10.1093/bioinformatics/btl355,
                author = {Du, Pan and Kibbe, Warren A. and Lin, Simon M.},
                title = '{Improved peak detection in mass spectrum by incorporating continuous wavelet transform-based pattern matching}',
                journal = {Bioinformatics},
                volume = {22},
                number = {17},
                pages = {2059-2065},
                year = {2006},
                month = {07},issn = {1367-4803},
                doi = {10.1093/bioinformatics/btl355},
                url = {https://doi.org/10.1093/bioinformatics/btl355},
            }
        </citation>
    </citations>
</tool>
