<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Utilities]-->
<tool id="SpectraSTSearchAdapter" name="SpectraSTSearchAdapter" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="20.05">
  <description>Interface to the SEARCH Mode of the SpectraST executable</description>
  <macros>
    <token name="@EXECUTABLE@">SpectraSTSearchAdapter</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir spectra_files &&
mkdir ${' '.join(["'spectra_files/%s'" % (i) for i, f in enumerate($spectra_files) if f])} && 
${' '.join(["ln -s '%s' 'spectra_files/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($spectra_files) if f])}
mkdir output_files &&
mkdir ${' '.join(["'output_files/%s'" % (i) for i, f in enumerate($spectra_files) if f])} && 
mkdir library_file &&
ln -s '$library_file' 'library_file/${re.sub("[^\w\-_]", "_", $library_file.element_identifier)}.$gxy2omsext($library_file.ext)' &&
#if $sequence_database_file:
  mkdir sequence_database_file &&
  ln -s '$sequence_database_file' 'sequence_database_file/${re.sub("[^\w\-_]", "_", $sequence_database_file.element_identifier)}.$gxy2omsext($sequence_database_file.ext)' &&
#end if
#if $search_file:
  mkdir search_file &&
  ln -s '$search_file' 'search_file/${re.sub("[^\w\-_]", "_", $search_file.element_identifier)}.$gxy2omsext($search_file.ext)' &&
#end if
#if $adv_opts_cond.adv_opts_selector=='advanced':
  #if $adv_opts_cond.user_mod_file:
    mkdir adv_opts_cond.user_mod_file &&
    ln -s '$adv_opts_cond.user_mod_file' 'adv_opts_cond.user_mod_file/${re.sub("[^\w\-_]", "_", $adv_opts_cond.user_mod_file.element_identifier)}.$gxy2omsext($adv_opts_cond.user_mod_file.ext)' &&
  #end if
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-spectra_files
${' '.join(["'spectra_files/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($spectra_files) if f])}
-output_files
${' '.join(["'output_files/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $output_files_type) for i, f in enumerate($spectra_files) if f])}
-library_file
'library_file/${re.sub("[^\w\-_]", "_", $library_file.element_identifier)}.$gxy2omsext($library_file.ext)'
#if $sequence_database_file:
  -sequence_database_file
  'sequence_database_file/${re.sub("[^\w\-_]", "_", $sequence_database_file.element_identifier)}.$gxy2omsext($sequence_database_file.ext)'
#end if
#if $search_file:
  -search_file
  'search_file/${re.sub("[^\w\-_]", "_", $search_file.element_identifier)}.$gxy2omsext($search_file.ext)'
#end if
#if $adv_opts_cond.adv_opts_selector=='advanced':
  #if $adv_opts_cond.user_mod_file:
    -user_mod_file
    'adv_opts_cond.user_mod_file/${re.sub("[^\w\-_]", "_", $adv_opts_cond.user_mod_file.element_identifier)}.$gxy2omsext($adv_opts_cond.user_mod_file.ext)'
  #end if
#end if

## Postprocessing
${' '.join(["&& mv -n 'output_files/%(bn)s/%(id)s.%(omsext)s' 'output_files/%(bn)s/%(id)s.%(gext)s'"%{"bn": i, "id": re.sub('[^\w\-_]', '_', f.element_identifier), "omsext":$output_files_type, "gext": $oms2gxyext(str($output_files_type))} for i, f in enumerate($spectra_files) if f])}
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"executable": "spectrast", "log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param name="spectra_files" argument="-spectra_files" type="data" format="dta,mgf,msp,mzdata,mzml,mzxml" multiple="true" optional="false" label="File names(s) of spectra to be searched" help=" select dta,mgf,msp,mzdata,mzml,mzxml data sets(s)"/>
    <param name="output_files_type" type="select" optional="false" label="File type of output output_files (Output files. Make sure to specify one output file for each input file)">
      <option value="txt">txt</option>
      <option value="tsv">tabular (tsv)</option>
      <option value="pep.xml">pepxml (pep.xml)</option>
      <option value="pepXML">pepxml</option>
      <option value="html">html</option>
    </param>
    <param name="library_file" argument="-library_file" type="data" format="splib" optional="false" label="Specify library file" help=" select splib data sets(s)"/>
    <param name="sequence_database_file" argument="-sequence_database_file" type="data" format="fasta" optional="true" label="The sequence database" help=" select fasta data sets(s)"/>
    <param name="sequence_database_type" argument="-sequence_database_type" display="checkboxes" type="select" optional="false" label="Specify type of sequence database" help="">
      <option value="DNA">DNA</option>
      <option value="AA" selected="true">AA</option>
      <expand macro="list_string_san" name="sequence_database_type"/>
    </param>
    <param name="search_file" argument="-search_file" type="data" format="txt" optional="true" label="Only search a subset of the query spectra in the search file" help=" select txt data sets(s)"/>
    <param name="precursor_mz_tolerance" argument="-precursor_mz_tolerance" type="float" optional="false" min="0.0" value="3.0" label="m/z (in Th) tolerance within which candidate entries are compared to the query" help="Monoisotopic mass is assumed"/>
    <expand macro="adv_opts_macro">
      <param name="use_isotopically_averaged_mass" argument="-use_isotopically_averaged_mass" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Use isotopically averaged mass instead of monoisotopic mass" help=""/>
      <param name="use_all_charge_states" argument="-use_all_charge_states" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Search library spectra of all charge states" help="i.e., ignore specified charge state (if any) of the query spectrum"/>
      <param name="user_mod_file" argument="-user_mod_file" type="data" format="txt" optional="true" label="Specify name of user-defined modifications file" help="Default is &quot;spectrast.usermods&quot; select txt data sets(s)"/>
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" optional="false" value="False" label="Enables the test mode (needed for internal use only)" help="">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <collection type="list" name="output_files" label="${tool.name} on ${on_string}: output_files">
      <discover_datasets directory="output_files" recurse="true" pattern="__name_and_ext__"/>
    </collection>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_SpectraSTSearchAdapter"/>
    <expand macro="manutest_SpectraSTSearchAdapter"/>
  </tests>
  <help><![CDATA[Interface to the SEARCH Mode of the SpectraST executable


For more information, visit http://www.openms.de/doxygen/release/2.6.0/html/UTILS_SpectraSTSearchAdapter.html]]></help>
  <expand macro="references"/>
</tool>
