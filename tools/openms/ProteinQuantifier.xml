<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Quantitation]-->
<tool id="ProteinQuantifier" name="ProteinQuantifier" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="20.05">
  <description>Compute peptide and protein abundances</description>
  <macros>
    <token name="@EXECUTABLE@">ProteinQuantifier</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
#if $protein_groups:
  mkdir protein_groups &&
  ln -s '$protein_groups' 'protein_groups/${re.sub("[^\w\-_]", "_", $protein_groups.element_identifier)}.$gxy2omsext($protein_groups.ext)' &&
#end if
#if $design:
  mkdir design &&
  ln -s '$design' 'design/${re.sub("[^\w\-_]", "_", $design.element_identifier)}.$gxy2omsext($design.ext)' &&
#end if
#if "out_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir out &&
#end if
#if "peptide_out_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir peptide_out &&
#end if
#if "mztab_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir mztab &&
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
#if $protein_groups:
  -protein_groups
  'protein_groups/${re.sub("[^\w\-_]", "_", $protein_groups.element_identifier)}.$gxy2omsext($protein_groups.ext)'
#end if
#if $design:
  -design
  'design/${re.sub("[^\w\-_]", "_", $design.element_identifier)}.$gxy2omsext($design.ext)'
#end if
#if "out_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -out
  'out/output.${gxy2omsext("csv")}'
#end if
#if "peptide_out_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -peptide_out
  'peptide_out/output.${gxy2omsext("csv")}'
#end if
#if "mztab_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -mztab
  'mztab/output.${gxy2omsext("mztab")}'
#end if
#if len(str($OPTIONAL_OUTPUTS).split(',')) == 0
  | tee '$stdout'
#end if

## Postprocessing
#if "out_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'out/output.${gxy2omsext("csv")}' '$out'
#end if
#if "peptide_out_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'peptide_out/output.${gxy2omsext("csv")}' '$peptide_out'
#end if
#if "mztab_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'mztab/output.${gxy2omsext("mztab")}' '$mztab'
#end if
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="consensusxml,featurexml,idxml" optional="false" label="Input file" help=" select consensusxml,featurexml,idxml data sets(s)"/>
    <param name="protein_groups" argument="-protein_groups" type="data" format="idxml" optional="true" label="Protein inference results for the identification runs that were used to annotate the input" help="(e.g. from ProteinProphet via IDFileConverter or Fido via FidoAdapter).. Information about indistinguishable proteins will be used for protein quantification select idxml data sets(s)"/>
    <param name="design" argument="-design" type="data" format="tabular" optional="true" label="input file containing the experimental design" help=" select tabular data sets(s)"/>
    <param name="top" argument="-top" type="integer" optional="false" min="0" value="3" label="Calculate protein abundance from this number of proteotypic peptides (most abundant first; '0' for all)" help=""/>
    <param name="average" argument="-average" display="checkboxes" type="select" optional="false" label="Averaging method used to compute protein abundances from peptide abundances" help="">
      <option value="median" selected="true">median</option>
      <option value="mean">mean</option>
      <option value="weighted_mean">weighted_mean</option>
      <option value="sum">sum</option>
      <expand macro="list_string_san" name="average"/>
    </param>
    <param name="include_all" argument="-include_all" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Include results for proteins with fewer proteotypic peptides than indicated by 'top' (no effect if 'top' is 0 or 1)" help=""/>
    <param name="best_charge_and_fraction" argument="-best_charge_and_fraction" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Distinguish between fraction and charge states of a peptide" help="For peptides, abundances will be reported separately for each fraction and charge;. for proteins, abundances will be computed based only on the most prevalent charge observed of each peptide (over all fractions).. By default, abundances are summed over all charge states"/>
    <param name="greedy_group_resolution" argument="-greedy_group_resolution" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Pre-process identifications with greedy resolution of shared peptides based on the protein group probabilities" help="(Only works with an idXML file given as protein_groups parameter)"/>
    <param name="ratios" argument="-ratios" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Add the log2 ratios of the abundance values to the output" help="Format: log_2(x_0/x_0) &lt;sep&gt; log_2(x_1/x_0) &lt;sep&gt; log_2(x_2/x_0) "/>
    <param name="ratiosSILAC" argument="-ratiosSILAC" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Add the log2 ratios for a triple SILAC experiment to the output" help="Only applicable to consensus maps of exactly three sub-maps. Format: log_2(heavy/light) &lt;sep&gt; log_2(heavy/middle) &lt;sep&gt; log_2(middle/light)"/>
    <section name="consensus" title="Additional options for consensus maps (and identification results comprising multiple runs)" help="" expanded="false">
      <param name="normalize" argument="-consensus:normalize" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Scale peptide abundances so that medians of all samples are equal" help=""/>
      <param name="fix_peptides" argument="-consensus:fix_peptides" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Use the same peptides for protein quantification across all samples" help="With 'top 0', all peptides that occur in every sample are considered.. Otherwise ('top N'), the N peptides that occur in the most samples (independently of each other) are selected,. breaking ties by total abundance (there is no guarantee that the best co-ocurring peptides are chosen!)"/>
    </section>
    <section name="format" title="Output formatting options" help="" expanded="false">
      <param name="separator" argument="-format:separator" type="text" optional="true" value="" label="Character(s) used to separate fields; by default, the 'tab' character is used" help="">
        <expand macro="list_string_san" name="separator"/>
      </param>
      <param name="quoting" argument="-format:quoting" display="checkboxes" type="select" optional="false" label="Method for quoting of strings: 'none' for no quoting, 'double' for quoting with doubling of embedded quotes" help="'escape' for quoting with backslash-escaping of embedded quotes">
        <option value="none">none</option>
        <option value="double" selected="true">double</option>
        <option value="escape">escape</option>
        <expand macro="list_string_san" name="quoting"/>
      </param>
      <param name="replacement" argument="-format:replacement" type="text" optional="false" value="_" label="If 'quoting' is 'none', used to replace occurrences of the separator in strings before writing" help="">
        <expand macro="list_string_san" name="replacement"/>
      </param>
    </section>
    <expand macro="adv_opts_macro">
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" optional="false" value="False" label="Enables the test mode (needed for internal use only)" help="">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="out_FLAG">out (Output file for protein abundances)</option>
      <option value="peptide_out_FLAG">peptide_out (Output file for peptide abundances)</option>
      <option value="mztab_FLAG">mztab (Output file (mzTab))</option>
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="csv">
      <filter>OPTIONAL_OUTPUTS is not None and "out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="peptide_out" label="${tool.name} on ${on_string}: peptide_out" format="csv">
      <filter>OPTIONAL_OUTPUTS is not None and "peptide_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="mztab" label="${tool.name} on ${on_string}: mztab" format="mztab">
      <filter>OPTIONAL_OUTPUTS is not None and "mztab_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="stdout" format="txt" label="${tool.name} on ${on_string}: stdout">
      <filter>OPTIONAL_OUTPUTS is None</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_ProteinQuantifier"/>
    <expand macro="manutest_ProteinQuantifier"/>
  </tests>
  <help><![CDATA[Compute peptide and protein abundances


For more information, visit http://www.openms.de/doxygen/release/2.6.0/html/TOPP_ProteinQuantifier.html]]></help>
  <expand macro="references"/>
</tool>
