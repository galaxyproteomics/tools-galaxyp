<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [[for Developers]]-->
<tool id="SemanticValidator" name="SemanticValidator" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>SemanticValidator for semantically validating certain XML files</description>
  <macros>
    <token name="@EXECUTABLE@">SemanticValidator</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
cp '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir mapping_file &&
cp '$mapping_file' 'mapping_file/${re.sub("[^\w\-_]", "_", $mapping_file.element_identifier)}.$gxy2omsext($mapping_file.ext)' &&
#if $cv_cond.cv:
  mkdir cv_cond.cv &&
  #if $cv_cond.cv_select == "no"
  mkdir ${' '.join(["'cv_cond.cv/%s'" % (i) for i, f in enumerate($cv_cond.cv) if f])} && 
  ${' '.join(["cp '%s' 'cv_cond.cv/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($cv_cond.cv) if f])}
  #else
  cp '$cv_cond.cv' 'cv_cond.cv/${re.sub("[^\w\-_]", "_", $cv_cond.cv.element_identifier)}.$gxy2omsext($cv_cond.cv.ext)' &&
  #end if
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-mapping_file
'mapping_file/${re.sub("[^\w\-_]", "_", $mapping_file.element_identifier)}.$gxy2omsext($mapping_file.ext)'
#if $cv_cond.cv:
  -cv
  #if $cv_cond.cv_select == "no"
  ${' '.join(["'cv_cond.cv/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($cv_cond.cv) if f])}
  #else
  'cv_cond.cv/${re.sub("[^\w\-_]", "_", $cv_cond.cv.element_identifier)}.$gxy2omsext($cv_cond.cv.ext)'
  #end if
#end if
| tee '$stdout'

## Postprocessing
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param argument="-in" type="data" format="mzdata,mzid,mzml,traml,xml" label="Input file (any xml file)" help=" select mzdata,mzid,mzml,traml,xml data sets(s)"/>
    <param argument="-mapping_file" type="data" format="xml" label="Mapping file which is used to semantically validate the given XML file against this mapping file (see 'share/OpenMS/MAPPING' for templates)" help=" select xml data sets(s)"/>
    <conditional name="cv_cond">
      <param name="cv_select" type="select" label="Run tool in batch mode for -cv">
        <option value="no">No: process all datasets jointly</option>
        <option value="yes">Yes: process each dataset in an independent job</option>
      </param>
      <when value="no">
        <param argument="-cv" type="data" format="obo" multiple="true" optional="true" label="Controlled Vocabulary files containg the CV terms (if left empty, a set of default files are used)" help=" select obo data sets(s)"/>
      </when>
      <when value="yes">
        <param argument="-cv" type="data" format="obo" optional="true" label="Controlled Vocabulary files containg the CV terms (if left empty, a set of default files are used)" help=" select obo data sets(s)"/>
      </when>
    </conditional>
    <expand macro="adv_opts_macro">
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="stdout" format="txt" label="${tool.name} on ${on_string}: stdout">
      <filter>OPTIONAL_OUTPUTS is None</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="1">
      <!-- just chosen an arbitrary input (same as XMLValidator) and autgenerated output-->
      <param name="adv_opts|test" value="true"/>
      <param name="in" ftype="mzml" value="FileFilter_1_input.mzML"/>
      <param name="mapping_file" ftype="xml" value="MAPPING/ms-mapping.xml"/>
      <output name="stdout" ftype="txt" value="SemanticValidator.stdout" lines_diff="4">
        <assert_contents>
          <has_text text="Congratulations, the file is valid!"/>
        </assert_contents>
      </output>
    </test>
  </tests>
  <help><![CDATA[SemanticValidator for semantically validating certain XML files.


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_SemanticValidator.html]]></help>
  <expand macro="references"/>
</tool>
