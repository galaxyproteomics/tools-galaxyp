<?xml version='1.0' encoding='UTF-8'?>
<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Peptide property prediction]-->
<tool id="RTModel" name="RTModel" version="@TOOL_VERSION@+galaxy@GALAXY_VERSION@" profile="20.05">
  <description>Trains a model for the retention time prediction of peptides from a training set.</description>
  <macros>
    <token name="@EXECUTABLE@">RTModel</token>
    <import>macros.xml</import>
    <import>macros_autotest.xml</import>
    <import>macros_test.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
#if $in:
  mkdir in &&
  ln -s '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
#end if
#if $in_positive:
  mkdir in_positive &&
  ln -s '$in_positive' 'in_positive/${re.sub("[^\w\-_]", "_", $in_positive.element_identifier)}.$gxy2omsext($in_positive.ext)' &&
#end if
#if $in_negative:
  mkdir in_negative &&
  ln -s '$in_negative' 'in_negative/${re.sub("[^\w\-_]", "_", $in_negative.element_identifier)}.$gxy2omsext($in_negative.ext)' &&
#end if
mkdir out &&
#if "out_oligo_params_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir out_oligo_params &&
#end if
#if "out_oligo_trainset_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir out_oligo_trainset &&
#end if

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
#if $in:
  -in
  'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
#end if
#if $in_positive:
  -in_positive
  'in_positive/${re.sub("[^\w\-_]", "_", $in_positive.element_identifier)}.$gxy2omsext($in_positive.ext)'
#end if
#if $in_negative:
  -in_negative
  'in_negative/${re.sub("[^\w\-_]", "_", $in_negative.element_identifier)}.$gxy2omsext($in_negative.ext)'
#end if
-out
'out/output.${gxy2omsext("txt")}'
#if "out_oligo_params_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -out_oligo_params
  'out_oligo_params/output.${gxy2omsext("paramxml")}'
#end if
#if "out_oligo_trainset_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -out_oligo_trainset
  'out_oligo_trainset/output.${gxy2omsext("txt")}'
#end if
#if len(str($OPTIONAL_OUTPUTS).split(',')) == 0
  | tee '$stdout'
#end if

## Postprocessing
&& mv 'out/output.${gxy2omsext("txt")}' '$out'
#if "out_oligo_params_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'out_oligo_params/output.${gxy2omsext("paramxml")}' '$out_oligo_params'
#end if
#if "out_oligo_trainset_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'out_oligo_trainset/output.${gxy2omsext("txt")}' '$out_oligo_trainset'
#end if
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param name="in" argument="-in" type="data" format="idxml,txt" optional="true" label="This is the name of the input file (RT prediction)" help="It is assumed that the file type is idXML. Alternatively you can provide a .txt file having a sequence and the corresponding rt per line..  select idxml,txt data sets(s)"/>
    <param name="in_positive" argument="-in_positive" type="data" format="idxml" optional="true" label="input file with positive examples (peptide separation prediction)" help=" select idxml data sets(s)"/>
    <param name="in_negative" argument="-in_negative" type="data" format="idxml" optional="true" label="input file with negative examples (peptide separation prediction)" help=" select idxml data sets(s)"/>
    <param name="svm_type" argument="-svm_type" display="checkboxes" type="select" optional="false" label="the type of the svm (NU_SVR or EPSILON_SVR for RT prediction, automatically set" help="to C_SVC for separation prediction). ">
      <option value="NU_SVR" selected="true">NU_SVR</option>
      <option value="NU_SVC">NU_SVC</option>
      <option value="EPSILON_SVR">EPSILON_SVR</option>
      <option value="C_SVC">C_SVC</option>
      <expand macro="list_string_san" name="svm_type"/>
    </param>
    <param name="nu" argument="-nu" type="float" optional="false" min="0.0" max="1.0" value="0.5" label="the nu parameter [0..1] of the svm (for nu-SVR)" help=""/>
    <param name="p" argument="-p" type="float" optional="false" value="0.1" label="the epsilon parameter of the svm (for epsilon-SVR)" help=""/>
    <param name="c" argument="-c" type="float" optional="false" value="1.0" label="the penalty parameter of the svm" help=""/>
    <param name="kernel_type" argument="-kernel_type" display="checkboxes" type="select" optional="false" label="the kernel type of the svm" help="">
      <option value="LINEAR">LINEAR</option>
      <option value="RBF">RBF</option>
      <option value="POLY">POLY</option>
      <option value="OLIGO" selected="true">OLIGO</option>
      <expand macro="list_string_san" name="kernel_type"/>
    </param>
    <param name="degree" argument="-degree" type="integer" optional="false" min="1" value="1" label="the degree parameter of the kernel function of the svm (POLY kernel)" help=""/>
    <param name="border_length" argument="-border_length" type="integer" optional="false" min="1" value="22" label="length of the POBK" help=""/>
    <param name="max_std" argument="-max_std" type="float" optional="false" min="0.0" value="10.0" label="max standard deviation for a peptide to be included (if there are several ones for one peptide string)(median is taken)" help=""/>
    <param name="k_mer_length" argument="-k_mer_length" type="integer" optional="false" min="1" value="1" label="k_mer length of the POBK" help=""/>
    <param name="sigma" argument="-sigma" type="float" optional="false" value="5.0" label="sigma of the POBK" help=""/>
    <param name="total_gradient_time" argument="-total_gradient_time" type="float" optional="false" min="1e-05" value="1.0" label="the time (in seconds) of the gradient (only for RT prediction)" help=""/>
    <param name="first_dim_rt" argument="-first_dim_rt" type="boolean" truevalue="true" falsevalue="false" checked="false" label="if set the model will be built for first_dim_rt" help=""/>
    <param name="additive_cv" argument="-additive_cv" type="boolean" truevalue="true" falsevalue="false" checked="false" label="if the step sizes should be interpreted additively (otherwise the actual value is multiplied" help="with the step size to get the new value"/>
    <section name="cv" title="Parameters for the grid search / cross validation:" help="" expanded="false">
      <param name="skip_cv" argument="-cv:skip_cv" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Set to enable Cross-Validation or set to true if the model should just be trained with 1 set of specified parameters" help=""/>
      <param name="number_of_runs" argument="-cv:number_of_runs" type="integer" optional="false" min="1" value="1" label="number of runs for the CV (each run creates a new random partition of the data)" help=""/>
      <param name="number_of_partitions" argument="-cv:number_of_partitions" type="integer" optional="false" min="2" value="10" label="number of CV partitions" help=""/>
      <param name="degree_start" argument="-cv:degree_start" type="integer" optional="false" min="1" value="1" label="starting point of degree" help=""/>
      <param name="degree_step_size" argument="-cv:degree_step_size" type="integer" optional="false" value="2" label="step size point of degree" help=""/>
      <param name="degree_stop" argument="-cv:degree_stop" type="integer" optional="false" value="4" label="stopping point of degree" help=""/>
      <param name="p_start" argument="-cv:p_start" type="float" optional="false" value="1.0" label="starting point of p" help=""/>
      <param name="p_step_size" argument="-cv:p_step_size" type="float" optional="false" value="10.0" label="step size point of p" help=""/>
      <param name="p_stop" argument="-cv:p_stop" type="float" optional="false" value="1000.0" label="stopping point of p" help=""/>
      <param name="c_start" argument="-cv:c_start" type="float" optional="false" value="1.0" label="starting point of c" help=""/>
      <param name="c_step_size" argument="-cv:c_step_size" type="float" optional="false" value="10.0" label="step size of c" help=""/>
      <param name="c_stop" argument="-cv:c_stop" type="float" optional="false" value="1000.0" label="stopping point of c" help=""/>
      <param name="nu_start" argument="-cv:nu_start" type="float" optional="false" min="0.0" max="1.0" value="0.3" label="starting point of nu" help=""/>
      <param name="nu_step_size" argument="-cv:nu_step_size" type="float" optional="false" value="1.2" label="step size of nu" help=""/>
      <param name="nu_stop" argument="-cv:nu_stop" type="float" optional="false" min="0.0" max="1.0" value="0.7" label="stopping point of nu" help=""/>
      <param name="sigma_start" argument="-cv:sigma_start" type="float" optional="false" value="1.0" label="starting point of sigma" help=""/>
      <param name="sigma_step_size" argument="-cv:sigma_step_size" type="float" optional="false" value="1.3" label="step size of sigma" help=""/>
      <param name="sigma_stop" argument="-cv:sigma_stop" type="float" optional="false" value="15.0" label="stopping point of sigma" help=""/>
    </section>
    <expand macro="adv_opts_macro">
      <param name="force" argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param name="test" argument="-test" type="hidden" optional="false" value="False" label="Enables the test mode (needed for internal use only)" help="">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="out_oligo_params_FLAG">out_oligo_params (output file with additional model parameters when using the OLIGO kernel)</option>
      <option value="out_oligo_trainset_FLAG">out_oligo_trainset (output file with the used training dataset when using the OLIGO kernel)</option>
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="txt"/>
    <data name="out_oligo_params" label="${tool.name} on ${on_string}: out_oligo_params" format="paramxml">
      <filter>OPTIONAL_OUTPUTS is not None and "out_oligo_params_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="out_oligo_trainset" label="${tool.name} on ${on_string}: out_oligo_trainset" format="txt">
      <filter>OPTIONAL_OUTPUTS is not None and "out_oligo_trainset_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <expand macro="autotest_RTModel"/>
    <expand macro="manutest_RTModel"/>
  </tests>
  <help><![CDATA[Trains a model for the retention time prediction of peptides from a training set.


For more information, visit http://www.openms.de/doxygen/release/2.6.0/html/TOPP_RTModel.html]]></help>
  <expand macro="references"/>
</tool>
