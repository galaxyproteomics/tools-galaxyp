<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Identification Processing]-->
<tool id="PeptideIndexer" name="PeptideIndexer" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>Refreshes the protein references for all peptide hits</description>
  <macros>
    <token name="@EXECUTABLE@">PeptideIndexer</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
cp '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
#if $fasta:
  mkdir fasta &&
  cp '$fasta' 'fasta/${re.sub("[^\w\-_]", "_", $fasta.element_identifier)}.$gxy2omsext($fasta.ext)' &&
#end if
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
#if $fasta:
  -fasta
  'fasta/${re.sub("[^\w\-_]", "_", $fasta.element_identifier)}.$gxy2omsext($fasta.ext)'
#end if
-out
'out/output.${gxy2omsext("idxml")}'

## Postprocessing
&& mv 'out/output.${gxy2omsext("idxml")}' '$out'
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param argument="-in" type="data" format="idxml" label="Input idXML file containing the identifications" help=" select idxml data sets(s)"/>
    <param argument="-fasta" type="data" format="fasta" optional="true" label="Input sequence database in FASTA format" help="Leave empty for using the same DB as used for the input idXML (this might fail). Non-existing relative filenames are looked up via 'OpenMS.ini:id_db_dir' select fasta data sets(s)"/>
    <param argument="-decoy_string" type="text" optional="true" value="" label="String that was appended (or prefixed - see 'decoy_string_position' flag below) to the accessions in the protein database to indicate decoy proteins" help="If empty (default), it's determined automatically (checking for common terms, both as prefix and suffix)">
      <expand macro="list_string_san" name="decoy_string"/>
    </param>
    <param argument="-decoy_string_position" type="select" label="Is the 'decoy_string' prepended (prefix) or appended (suffix) to the protein accession" help="(ignored if decoy_string is empty)">
      <option value="prefix" selected="true">prefix</option>
      <option value="suffix">suffix</option>
      <expand macro="list_string_san" name="decoy_string_position"/>
    </param>
    <param argument="-missing_decoy_action" type="select" label="Action to take if NO peptide was assigned to a decoy protein (which indicates wrong database or decoy string): 'error' (exit with error, no output), 'warn' (exit with success, warning message), 'silent' (no action is taken, not even a warning)" help="">
      <option value="error" selected="true">error</option>
      <option value="warn">warn</option>
      <option value="silent">silent</option>
      <expand macro="list_string_san" name="missing_decoy_action"/>
    </param>
    <param argument="-write_protein_sequence" type="boolean" truevalue="true" falsevalue="false" checked="false" label="If set, the protein sequences are stored as well" help=""/>
    <param argument="-write_protein_description" type="boolean" truevalue="true" falsevalue="false" checked="false" label="If set, the protein description is stored as well" help=""/>
    <param argument="-keep_unreferenced_proteins" type="boolean" truevalue="true" falsevalue="false" checked="false" label="If set, protein hits which are not referenced by any peptide are kept" help=""/>
    <param argument="-unmatched_action" type="select" label="If peptide sequences cannot be matched to any protein: 1) raise an error; 2) warn (unmatched PepHits will miss target/decoy annotation with downstream problems); 3) remove the hit" help="">
      <option value="error" selected="true">error</option>
      <option value="warn">warn</option>
      <option value="remove">remove</option>
      <expand macro="list_string_san" name="unmatched_action"/>
    </param>
    <param argument="-aaa_max" type="integer" min="0" max="10" value="3" label="Maximal number of ambiguous amino acids (AAAs) allowed when matching to a protein database with AAAs" help="AAAs are 'B', 'J', 'Z' and 'X'"/>
    <param argument="-mismatches_max" type="integer" min="0" max="10" value="0" label="Maximal number of mismatched (mm) amino acids allowed when matching to a protein database" help="The required runtime is exponential in the number of mm's; apply with care. MM's are allowed in addition to AAA's"/>
    <param argument="-IL_equivalent" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Treat the isobaric amino acids isoleucine ('I') and leucine ('L') as equivalent (indistinguishable)" help="Also occurrences of 'J' will be treated as 'I' thus avoiding ambiguous matching"/>
    <param argument="-allow_nterm_protein_cleavage" type="boolean" truevalue="true" falsevalue="false" checked="true" label="Allow the protein N-terminus amino acid to clip" help=""/>
    <section name="enzyme" title="" help="" expanded="false">
      <param name="name" argument="-enzyme:name" type="select" label="Enzyme which determines valid cleavage sites -" help="e.g. trypsin cleaves after lysine (K) or arginine (R), but not before proline (P). Default: deduce from input">
        <option value="auto" selected="true">auto</option>
        <option value="Trypsin">Trypsin</option>
        <option value="Arg-C">Arg-C</option>
        <option value="cyanogen-bromide">cyanogen-bromide</option>
        <option value="Clostripain/P">Clostripain/P</option>
        <option value="elastase-trypsin-chymotrypsin">elastase-trypsin-chymotrypsin</option>
        <option value="no cleavage">no cleavage</option>
        <option value="unspecific cleavage">unspecific cleavage</option>
        <option value="glutamyl endopeptidase">glutamyl endopeptidase</option>
        <option value="Alpha-lytic protease">Alpha-lytic protease</option>
        <option value="2-iodobenzoate">2-iodobenzoate</option>
        <option value="iodosobenzoate">iodosobenzoate</option>
        <option value="staphylococcal protease/D">staphylococcal protease/D</option>
        <option value="proline-endopeptidase/HKR">proline-endopeptidase/HKR</option>
        <option value="Glu-C+P">Glu-C+P</option>
        <option value="PepsinA + P">PepsinA + P</option>
        <option value="Trypsin/P">Trypsin/P</option>
        <option value="V8-DE">V8-DE</option>
        <option value="Arg-C/P">Arg-C/P</option>
        <option value="Asp-N">Asp-N</option>
        <option value="Asp-N/B">Asp-N/B</option>
        <option value="Asp-N_ambic">Asp-N_ambic</option>
        <option value="Chymotrypsin">Chymotrypsin</option>
        <option value="Chymotrypsin/P">Chymotrypsin/P</option>
        <option value="CNBr">CNBr</option>
        <option value="Formic_acid">Formic_acid</option>
        <option value="Lys-C">Lys-C</option>
        <option value="Lys-N">Lys-N</option>
        <option value="Lys-C/P">Lys-C/P</option>
        <option value="PepsinA">PepsinA</option>
        <option value="TrypChymo">TrypChymo</option>
        <option value="V8-E">V8-E</option>
        <option value="leukocyte elastase">leukocyte elastase</option>
        <option value="proline endopeptidase">proline endopeptidase</option>
        <expand macro="list_string_san" name="name"/>
      </param>
      <param name="specificity" argument="-enzyme:specificity" type="select" label="Specificity of the enzyme" help="Default: deduce from input..   'full': both internal cleavage sites must match..   'semi': one of two internal cleavage sites must match..   'none': allow all peptide hits no matter their context (enzyme is irrelevant)">
        <option value="auto" selected="true">auto</option>
        <option value="full">full</option>
        <option value="semi">semi</option>
        <option value="none">none</option>
        <expand macro="list_string_san" name="specificity"/>
      </param>
    </section>
    <expand macro="adv_opts_macro">
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="idxml"/>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_PeptideIndexer_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_1.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_1_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_2 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_1.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_2_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="true"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_3 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_1.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_3_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="true"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_4 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_1.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_4_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="true"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="0"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_5 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_1.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_5_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_6 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_2.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_6_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="3"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_7 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_3.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_7_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value="DECOY_"/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="full"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_8 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_3.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_8_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="semi"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_9 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_3.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_9_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="remove"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_10 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_10_input.idXML"/>
      <param name="fasta" value="PeptideIndexer_10_input.fasta"/>
      <output name="out" value="PeptideIndexer_10_output.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="true"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="error"/>
      <param name="aaa_max" value="3"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="true"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="auto"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_12 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_1.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="PeptideIndexer_12_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="warn"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_13 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="empty_0.idXML"/>
      <param name="fasta" value="PeptideIndexer_1.fasta"/>
      <output name="out" value="empty_1.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="false"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="error"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="auto"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PeptideIndexer_14 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="PeptideIndexer_14.idXML"/>
      <param name="fasta" value="PeptideIndexer_2.fasta"/>
      <output name="out" value="PeptideIndexer_14_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="decoy_string" value=""/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="missing_decoy_action" value="error"/>
      <param name="write_protein_sequence" value="true"/>
      <param name="write_protein_description" value="false"/>
      <param name="keep_unreferenced_proteins" value="false"/>
      <param name="unmatched_action" value="error"/>
      <param name="aaa_max" value="4"/>
      <param name="mismatches_max" value="0"/>
      <param name="IL_equivalent" value="false"/>
      <param name="allow_nterm_protein_cleavage" value="true"/>
      <section name="enzyme">
        <param name="name" value="auto"/>
        <param name="specificity" value="none"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Refreshes the protein references for all peptide hits.


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_PeptideIndexer.html]]></help>
  <expand macro="references"/>
</tool>
