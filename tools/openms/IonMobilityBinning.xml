<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [File Filtering / Extraction / Merging]-->
<tool id="IonMobilityBinning" name="IonMobilityBinning" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.0">
  <description>Splits an mzML file with IonMobility frames into multiple mzML files by binning(merging) spectra by their IM values</description>
  <macros>
    <token name="@EXECUTABLE@">IonMobilityBinning</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
cp '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir out &&

## Main program call

set -o pipefail &&
echo @TOOL_VERSION@ &&
@EXECUTABLE@ --helphelp ./ &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-out
out/

## Postprocessing
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param argument="-in" type="data" format="mzml" label="Input file (containing RT, IM, m/z" help="i.e. IM-frames) select mzml data sets(s)"/>
    <param argument="-bins" type="integer" value="5" label="Number of ion mobility bins to split the input file into" help=""/>
    <param argument="-bin_extension_abs" type="float" value="0.0" label="Absolute extension of the bin in IM dimension (causes bins to overlap by 2x this value)" help=""/>
    <section name="SpectraMerging" title="Options for merging spectra within the same IM bin (from the same IM-frame)" help="" expanded="false">
      <param name="mz_binning_width" argument="-SpectraMerging:mz_binning_width" type="float" value="0.01" label="Width of the m/z bins" help=""/>
      <param name="mz_binning_width_unit" argument="-SpectraMerging:mz_binning_width_unit" type="select" label="Unit of the m/z bin width" help="">
        <option value="Da" selected="true">Da</option>
        <option value="ppm">ppm</option>
        <expand macro="list_string_san" name="mz_binning_width_unit"/>
      </param>
    </section>
    <expand macro="adv_opts_macro">
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <collection type="list" name="out" label="${tool.name} on ${on_string}: out">
      <discover_datasets directory="out" recurse="true" format="txt" pattern="_?(?P&lt;designation&gt;.*)\.[^.]*"/>
    </collection>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests/>
  <help><![CDATA[Splits an mzML file with IonMobility frames into multiple mzML files by binning(merging) spectra by their IM values


For more information, visit https://openms.de/doxygen/release/3.2.0/html/TOPP_IonMobilityBinning.html]]></help>
  <expand macro="references"/>
</tool>
