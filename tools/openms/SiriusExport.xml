<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: []-->
<tool id="SiriusExport" name="SiriusExport" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.0">
  <description>Metabolite identification using single and tandem mass spectrometry</description>
  <macros>
    <token name="@EXECUTABLE@">SiriusExport</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in_cond.in &&
#if $in_cond.in_select == "no"
mkdir ${' '.join(["'in_cond.in/%s'" % (i) for i, f in enumerate($in_cond.in) if f])} && 
${' '.join(["cp '%s' 'in_cond.in/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
cp '$in_cond.in' 'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)' &&
#end if
#if $in_featureinfo_cond.in_featureinfo:
  mkdir in_featureinfo_cond.in_featureinfo &&
  #if $in_featureinfo_cond.in_featureinfo_select == "no"
  mkdir ${' '.join(["'in_featureinfo_cond.in_featureinfo/%s'" % (i) for i, f in enumerate($in_featureinfo_cond.in_featureinfo) if f])} && 
  ${' '.join(["cp '%s' 'in_featureinfo_cond.in_featureinfo/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_featureinfo_cond.in_featureinfo) if f])}
  #else
  cp '$in_featureinfo_cond.in_featureinfo' 'in_featureinfo_cond.in_featureinfo/${re.sub("[^\w\-_]", "_", $in_featureinfo_cond.in_featureinfo.element_identifier)}.$gxy2omsext($in_featureinfo_cond.in_featureinfo.ext)' &&
  #end if
#end if
mkdir out &&
#if "out_compoundinfo_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir out_compoundinfo &&
#end if

## Main program call

set -o pipefail &&
echo @TOOL_VERSION@ &&
@EXECUTABLE@ --helphelp ./ &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
#if $in_cond.in_select == "no"
${' '.join(["'in_cond.in/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)'
#end if
#if $in_featureinfo_cond.in_featureinfo:
  -in_featureinfo
  #if $in_featureinfo_cond.in_featureinfo_select == "no"
  ${' '.join(["'in_featureinfo_cond.in_featureinfo/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_featureinfo_cond.in_featureinfo) if f])}
  #else
  'in_featureinfo_cond.in_featureinfo/${re.sub("[^\w\-_]", "_", $in_featureinfo_cond.in_featureinfo.element_identifier)}.$gxy2omsext($in_featureinfo_cond.in_featureinfo.ext)'
  #end if
#end if
-out
'out/output.${gxy2omsext("sirius.ms")}'
#if "out_compoundinfo_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -out_compoundinfo
  'out_compoundinfo/output.${gxy2omsext("tabular")}'
#end if
#if len(str($OPTIONAL_OUTPUTS).split(',')) == 0
  | tee '$stdout'
#end if

## Postprocessing
&& mv 'out/output.${gxy2omsext("sirius.ms")}' '$out'
#if "out_compoundinfo_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'out_compoundinfo/output.${gxy2omsext("tabular")}' '$out_compoundinfo'
#end if
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <conditional name="in_cond">
      <param name="in_select" type="select" label="Run tool in batch mode for -in">
        <option value="no">No: process all datasets jointly</option>
        <option value="yes">Yes: process each dataset in an independent job</option>
      </param>
      <when value="no">
        <param argument="-in" type="data" format="mzml" multiple="true" label="MzML Input file(s)" help=" select mzml data sets(s)"/>
      </when>
      <when value="yes">
        <param argument="-in" type="data" format="mzml" label="MzML Input file(s)" help=" select mzml data sets(s)"/>
      </when>
    </conditional>
    <conditional name="in_featureinfo_cond">
      <param name="in_featureinfo_select" type="select" label="Run tool in batch mode for -in_featureinfo">
        <option value="no">No: process all datasets jointly</option>
        <option value="yes">Yes: process each dataset in an independent job</option>
      </param>
      <when value="no">
        <param argument="-in_featureinfo" type="data" format="featurexml" multiple="true" optional="true" label="FeatureXML input with feature and adduct information" help=" select featurexml data sets(s)"/>
      </when>
      <when value="yes">
        <param argument="-in_featureinfo" type="data" format="featurexml" optional="true" label="FeatureXML input with feature and adduct information" help=" select featurexml data sets(s)"/>
      </when>
    </conditional>
    <param argument="-filter_by_num_masstraces" type="integer" min="1" value="1" label="Number of mass traces each feature has to have to be included" help="To use this parameter, setting the feature_only flag is necessary"/>
    <param argument="-precursor_mz_tolerance" type="float" value="10.0" label="Tolerance window for precursor selection (Feature selection in regard to the precursor)" help=""/>
    <param argument="-precursor_mz_tolerance_unit" type="select" label="Unit of the preprocessing_precursor_mz_tolerance" help="">
      <option value="ppm" selected="true">ppm</option>
      <option value="Da">Da</option>
      <expand macro="list_string_san" name="precursor_mz_tolerance_unit"/>
    </param>
    <param argument="-precursor_rt_tolerance" type="float" value="5.0" label="Tolerance window (left and right) for precursor selection [seconds]" help=""/>
    <param argument="-isotope_pattern_iterations" type="integer" value="3" label="Number of iterations that should be performed to extract the C13 isotope pattern" help="If no peak is found (C13 distance) the function will abort. Be careful with noisy data - since this can lead to wrong isotope patterns"/>
    <param argument="-feature_only" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Uses the feature information from in_featureinfo to reduce the search space to MS2 associated with a feature" help=""/>
    <param argument="-no_masstrace_info_isotope_pattern" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Set to true if the masstrace information from a feature should be discarded and the isotope_pattern_iterations should be used instead" help=""/>
    <expand macro="adv_opts_macro">
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="out_compoundinfo_FLAG">out_compoundinfo (File (.tsv) with information on processed compounds which are associated with a feature)</option>
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="sirius.ms"/>
    <data name="out_compoundinfo" label="${tool.name} on ${on_string}: out_compoundinfo" format="tabular">
      <filter>OPTIONAL_OUTPUTS is not None and "out_compoundinfo_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_SiriusExport_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="SiriusExport_1_input.mzML"/>
      </conditional>
      <output name="out" value="SiriusExport_1_output.ms" compare="sim_size" delta_frac="0.7" ftype="sirius.ms"/>
      <param name="filter_by_num_masstraces" value="1"/>
      <param name="precursor_mz_tolerance" value="10.0"/>
      <param name="precursor_mz_tolerance_unit" value="ppm"/>
      <param name="precursor_rt_tolerance" value="5.0"/>
      <param name="isotope_pattern_iterations" value="3"/>
      <param name="feature_only" value="false"/>
      <param name="no_masstrace_info_isotope_pattern" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_SiriusExport_2 -->
    <test expect_num_outputs="3">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="AssayGeneratorMetabo_input.mzML"/>
      </conditional>
      <conditional name="in_featureinfo_cond">
        <param name="in_featureinfo" value="AssayGeneratorMetabo_ams_input.featureXML"/>
      </conditional>
      <output name="out" value="SiriusExport_2_output.ms" compare="sim_size" delta_frac="0.7" ftype="sirius.ms"/>
      <output name="out_compoundinfo" value="SiriusExport_2_output_compoundinfo.tsv" compare="sim_size" delta_frac="0.7" ftype="tabular"/>
      <param name="filter_by_num_masstraces" value="1"/>
      <param name="precursor_mz_tolerance" value="10.0"/>
      <param name="precursor_mz_tolerance_unit" value="ppm"/>
      <param name="precursor_rt_tolerance" value="5.0"/>
      <param name="isotope_pattern_iterations" value="3"/>
      <param name="feature_only" value="true"/>
      <param name="no_masstrace_info_isotope_pattern" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG,out_compoundinfo_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_SiriusExport_3 -->
    <test expect_num_outputs="3">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="SiriusExport_1_input.mzML,AssayGeneratorMetabo_input.mzML"/>
      </conditional>
      <conditional name="in_featureinfo_cond">
        <param name="in_featureinfo" value="SiriusExport_1_input.featureXML,AssayGeneratorMetabo_ams_input.featureXML"/>
      </conditional>
      <output name="out" value="SiriusExport_3_output.ms" compare="sim_size" delta_frac="0.7" ftype="sirius.ms"/>
      <output name="out_compoundinfo" value="SiriusExport_3_output_compoundinfo.tsv" compare="sim_size" delta_frac="0.7" ftype="tabular"/>
      <param name="filter_by_num_masstraces" value="1"/>
      <param name="precursor_mz_tolerance" value="10.0"/>
      <param name="precursor_mz_tolerance_unit" value="ppm"/>
      <param name="precursor_rt_tolerance" value="5.0"/>
      <param name="isotope_pattern_iterations" value="3"/>
      <param name="feature_only" value="false"/>
      <param name="no_masstrace_info_isotope_pattern" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG,out_compoundinfo_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Metabolite identification using single and tandem mass spectrometry


For more information, visit https://openms.de/doxygen/release/3.2.0/html/TOPP_SiriusExport.html]]></help>
  <expand macro="references"/>
</tool>
