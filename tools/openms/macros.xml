<?xml version='1.0' encoding='UTF-8'?>
<!-- CTD2Galaxy depends on this file and on the stdio, advanced_options macros!
     You can edit this file to add your own macros, if you so desire, or you can
     add additional macro files using the m/macros parameter -->
<macros>
  <token name="@TOOL_VERSION@">2.6</token>
  <token name="@GALAXY_VERSION@">0</token>
  <xml name="requirements">
    <requirements>
      <requirement type="package" version="@TOOL_VERSION@">openms</requirement>
      <requirement type="package" version="@TOOL_VERSION@">openms-thirdparty</requirement>
      <!-- makeblastdb for OMSSAAdapter -->
      <requirement type="package" version="2.9.0">blast</requirement>
      <!--<requirement type="package" version="5.0.0">tpp</requirement>-->
      <!-- for realpath (used e.g. in LuciphorAdapter) -->
	  <!--<requirement type="package" version="8.25">coreutils</requirement>-->
	  <requirement type="package" version="1.4">ctdopts</requirement>
      <yield/>
    </requirements>
  </xml>
  <xml name="stdio">
    <stdio>
      <regex match="std::bad_alloc" level="fatal_oom" description="Could not allocate memory"/>
      <regex match="Could not allocate metaspace" level="fatal_oom" description="Java memory Exception"/>
      <regex match="Cannot create VM thread" level="fatal_oom" description="Java memory Exception"/>
      <regex match="qUncompress: could not allocate enough memory to uncompress data" level="fatal_oom" description="Java memory Exception"/>
    </stdio>
  </xml>
  <xml name="references">
    <citations>
      <citation type="doi">doi:10.1186/1471-2105-9-163</citation>
    </citations>
  </xml>
  <xml name="adv_opts_macro">
    <conditional name="adv_opts_cond">
      <param name="adv_opts_selector" type="select" label="Advanced Options">
        <option value="basic" selected="True">Hide Advanced Options</option>
        <option value="advanced">Show Advanced Options</option>
      </param>
      <when value="basic"/>
      <when value="advanced">
        <yield/>
      </when>
    </conditional>
  </xml>

  <!-- sanitizers and validators -->
  <xml name="list_string_val">
    <validator type="regex" message="parameter must not start with $">^[^$]</validator>
    
    <validator type="regex" message="a space separated list of string is needed (strings that contain spaces can be quoted with &quot;)">^ *((?:\"[^\"]*\" +)|(?:[^ \"]+ +))*((?:\"[^\"]*\")|(?:[^ \"]+)) *$</validator>
  </xml>
  <xml name="list_string_san">
    <sanitizer>
      <valid initial="string.printable">
<!--        <remove value="'"/>-->
<!--        <remove value="\"/>--><!-- otherwise the user could quote the final quote -->
<!--        <remove value="`"/>-->
<!--        <remove value="$"/>-->
<!--        <remove value="&lt;"/>-->
	<!--<remove value="&amp;"/> removed for MascotAdapterOnline -Mascot_server:export_params which is a URL POST string which can contain & .. could be mapped to &amp; but there is still a & -->
        <!--<remove value=";"/>-->
<!--        <remove value="#"/>-->
      </valid>
    </sanitizer>
  </xml>
  <xml name="list_float_valsan">
    <validator type="regex" message="a space separated list of float values is required">^ *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?( *[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)* *$</validator>
    <yield/>
    <sanitizer>
      <valid initial="string.digits">
        <add value=" "/>
        <add value="."/>
        <add value="E"/>
        <add value="e"/>
        <add value="+"/>
        <add value="-"/>
      </valid>
    </sanitizer>
  </xml>
  <xml name="list_integer_valsan">
    <validator type="regex" message="a space separated list of integer values is required">^ *[+-]?[0-9]+( *[+-]?[0-9]+)* *$</validator>
    <yield/>
    <sanitizer>
      <valid initial="string.digits">
        <add value=" "/>
        <add value="+"/>
        <add value="-"/>
      </valid>
    </sanitizer>
  </xml>

  <!-- helper function to quote space separated strings -->
  <token name="@QUOTE_FOO@">
#def quote(s):
    #set $s = [ _ for _ in $s.split(" ") if _ != "" ]
    #set $q = False
    #for $i, $p in enumerate($s):
        #if $p == "":
            #continue
        #end if
        #if $p.startswith('"'):
            #set $q = True
        #end if
##        #if p.startswith('-'):
##            #set p = "\\" + p
##        #elif p.startswith('"-'):
##            #set p = "\\" + p[1:]
##        #end if
        #if not $q:
            #set $s[i] = '"%s"' % p
        #end if
        #if $p.endswith('"'):
            #set $q = False
        #end if
    #end for
    #return " ".join($s)
#end def
  </token>

<token name="@EXT_FOO@"><![CDATA[#def oms2gxyext(o)
    #set m={'txt': 'txt', 'tsv': 'tabular', 'bioml': 'xml', 'consensusXML': 'consensusxml', 'csv': 'csv', 'dta': 'dta', 'dta2d': 'dta2d', 'edta': 'edta', 'fa': 'fasta', 'fas': 'fasta', 'fasta': 'fasta', 'FASTA': 'fasta', 'featureXML': 'featurexml', 'featurexml': 'featurexml', 'html': 'html', 'HTML': 'html', 'idXML': 'idxml', 'json': 'json', 'kroenik': 'kroenik', 'mascotXML': 'mascotxml', 'mgf': 'mgf', 'mrm': 'mrm', 'ms': 'sirius.ms', 'ms2': 'ms2', 'msp': 'msp', 'mzData': 'mzdata', 'mzid': 'mzid', 'mzML': 'mzml', 'mzml': 'mzml', 'mzq': 'mzq', 'mzTab': 'mztab', 'mzXML': 'mzxml', 'novor': 'txt', 'obo': 'obo', 'omssaXML': 'idxml', 'osw': 'osw', 'OSW': 'osw', 'params': 'txt', 'paramXML': 'paramxml', 'peplist': 'peplist', 'pep.xml': 'pepxml', 'pepXML': 'pepxml', 'png': 'png', 'PNG': 'png', 'protXML': 'protxml', 'psms': 'psms', 'pqp': 'pqp', 'qcML': 'qcml', 'spec.xml': 'spec.xml', 'splib': 'splib', 'sqMass': 'sqmass', 'tandem.xml': 'tandem', 'trafoXML': 'trafoxml', 'traML': 'traml', 'TraML': 'traml', 'tab': 'tabular', 'raw': 'thermo.raw', 'xls': 'tsv', 'XML': 'xml', 'xml': 'xml', 'xquest.xml': 'xquest.xml', 'xsd': 'xml'}
    #return m[o]
#end def
#def gxy2omsext(g)
    #set m={'txt': 'txt', 'tabular': 'tsv', 'xml': 'bioml', 'consensusxml': 'consensusXML', 'csv': 'csv', 'dta': 'dta', 'dta2d': 'dta2d', 'edta': 'edta', 'fasta': 'fa', 'featurexml': 'featureXML', 'html': 'html', 'idxml': 'idXML', 'json': 'json', 'kroenik': 'kroenik', 'mascotxml': 'mascotXML', 'mgf': 'mgf', 'mrm': 'mrm', 'sirius.ms': 'ms', 'ms2': 'ms2', 'msp': 'msp', 'mzdata': 'mzData', 'mzid': 'mzid', 'mzml': 'mzML', 'mzq': 'mzq', 'mztab': 'mzTab', 'mzxml': 'mzXML', 'obo': 'obo', 'osw': 'osw', 'paramxml': 'paramXML', 'peff': 'fasta', 'peplist': 'peplist', 'pepxml': 'pep.xml', 'png': 'png', 'protxml': 'protXML', 'psms': 'psms', 'pqp': 'pqp', 'qcml': 'qcML', 'spec.xml': 'spec.xml', 'splib': 'splib', 'sqmass': 'sqMass', 'tandem': 'tandem.xml', 'trafoxml': 'trafoXML', 'traml': 'traML', 'thermo.raw': 'raw', 'tsv': 'xls', 'xquest.xml': 'xquest.xml'}
    #return m[g]
#end def
]]></token></macros>
