<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [File Filtering / Extraction / Merging]-->
<tool id="DecoyDatabase" name="DecoyDatabase" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="23.0">
  <description>Creates combined target+decoy sequence database from forward sequence database</description>
  <macros>
    <token name="@EXECUTABLE@">DecoyDatabase</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in_cond.in &&
#if $in_cond.in_select == "no"
mkdir ${' '.join(["'in_cond.in/%s'" % (i) for i, f in enumerate($in_cond.in) if f])} && 
${' '.join(["cp '%s' 'in_cond.in/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
cp '$in_cond.in' 'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)' &&
#end if
mkdir out &&
#if $NeighborSearch.in_relevant_proteins:
  mkdir NeighborSearch.in_relevant_proteins &&
  cp '$NeighborSearch.in_relevant_proteins' 'NeighborSearch.in_relevant_proteins/${re.sub("[^\w\-_]", "_", $NeighborSearch.in_relevant_proteins.element_identifier)}.$gxy2omsext($NeighborSearch.in_relevant_proteins.ext)' &&
#end if
#if "out_neighbor_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir NeighborSearch_out_neighbor &&
#end if
#if "out_relevant_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  mkdir NeighborSearch_out_relevant &&
#end if

## Main program call

set -o pipefail &&
echo @TOOL_VERSION@ &&
@EXECUTABLE@ --helphelp ./ &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
#if $in_cond.in_select == "no"
${' '.join(["'in_cond.in/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)'
#end if
-out
'out/output.${gxy2omsext("fasta")}'
#if $NeighborSearch.in_relevant_proteins:
  -NeighborSearch:in_relevant_proteins
  'NeighborSearch.in_relevant_proteins/${re.sub("[^\w\-_]", "_", $NeighborSearch.in_relevant_proteins.element_identifier)}.$gxy2omsext($NeighborSearch.in_relevant_proteins.ext)'
#end if
#if "out_neighbor_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -NeighborSearch:out_neighbor
  'NeighborSearch_out_neighbor/output.${gxy2omsext("txt")}'
#end if
#if "out_relevant_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  -NeighborSearch:out_relevant
  'NeighborSearch_out_relevant/output.${gxy2omsext("txt")}'
#end if
#if len(str($OPTIONAL_OUTPUTS).split(',')) == 0
  | tee '$stdout'
#end if

## Postprocessing
&& mv 'out/output.${gxy2omsext("fasta")}' '$out'
#if "out_neighbor_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'NeighborSearch_out_neighbor/output.${gxy2omsext("txt")}' '$NeighborSearch_out_neighbor'
#end if
#if "out_relevant_FLAG" in str($OPTIONAL_OUTPUTS).split(',')
  && mv 'NeighborSearch_out_relevant/output.${gxy2omsext("txt")}' '$NeighborSearch_out_relevant'
#end if
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <conditional name="in_cond">
      <param name="in_select" type="select" label="Run tool in batch mode for -in">
        <option value="no">No: process all datasets jointly</option>
        <option value="yes">Yes: process each dataset in an independent job</option>
      </param>
      <when value="no">
        <param argument="-in" type="data" format="fasta" multiple="true" label="Input FASTA file(s), each containing a database" help="It is recommended to include a contaminant database as well select fasta data sets(s)"/>
      </when>
      <when value="yes">
        <param argument="-in" type="data" format="fasta" label="Input FASTA file(s), each containing a database" help="It is recommended to include a contaminant database as well select fasta data sets(s)"/>
      </when>
    </conditional>
    <param argument="-decoy_string" type="text" value="DECOY_" label="String that is combined with the accession of the protein identifier to indicate a decoy protein" help="">
      <expand macro="list_string_san" name="decoy_string"/>
    </param>
    <param argument="-decoy_string_position" type="select" label="Should the 'decoy_string' be prepended (prefix) or appended (suffix) to the protein accession?" help="">
      <option value="prefix" selected="true">prefix</option>
      <option value="suffix">suffix</option>
      <expand macro="list_string_san" name="decoy_string_position"/>
    </param>
    <param argument="-only_decoy" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Write only decoy proteins to the output database instead of a combined database" help=""/>
    <param argument="-type" type="select" label="Type of sequence" help="RNA sequences may contain modification codes, which will be handled correctly if this is set to 'RNA'">
      <option value="protein" selected="true">protein</option>
      <option value="RNA">RNA</option>
      <expand macro="list_string_san" name="type"/>
    </param>
    <param argument="-method" type="select" label="Method by which decoy sequences are generated from target sequences" help="Note that all sequences are shuffled using the same random seed, ensuring that identical sequences produce the same shuffled decoy sequences. Shuffled sequences that produce highly similar output sequences are shuffled again (see shuffle_sequence_identity_threshold)">
      <option value="reverse" selected="true">reverse</option>
      <option value="shuffle">shuffle</option>
      <expand macro="list_string_san" name="method"/>
    </param>
    <param argument="-enzyme" type="select" label="Enzyme used for the digestion of the sample" help="Only applicable if parameter 'type' is 'protein'">
      <option value="Trypsin" selected="true">Trypsin</option>
      <option value="Arg-C">Arg-C</option>
      <option value="Clostripain/P">Clostripain/P</option>
      <option value="elastase-trypsin-chymotrypsin">elastase-trypsin-chymotrypsin</option>
      <option value="no cleavage">no cleavage</option>
      <option value="unspecific cleavage">unspecific cleavage</option>
      <option value="leukocyte elastase">leukocyte elastase</option>
      <option value="proline endopeptidase">proline endopeptidase</option>
      <option value="staphylococcal protease/D">staphylococcal protease/D</option>
      <option value="proline-endopeptidase/HKR">proline-endopeptidase/HKR</option>
      <option value="Glu-C+P">Glu-C+P</option>
      <option value="PepsinA + P">PepsinA + P</option>
      <option value="cyanogen-bromide">cyanogen-bromide</option>
      <option value="Arg-C/P">Arg-C/P</option>
      <option value="Asp-N">Asp-N</option>
      <option value="Asp-N/B">Asp-N/B</option>
      <option value="Asp-N_ambic">Asp-N_ambic</option>
      <option value="Chymotrypsin">Chymotrypsin</option>
      <option value="Chymotrypsin/P">Chymotrypsin/P</option>
      <option value="CNBr">CNBr</option>
      <option value="Formic_acid">Formic_acid</option>
      <option value="Lys-C">Lys-C</option>
      <option value="Lys-N">Lys-N</option>
      <option value="Lys-C/P">Lys-C/P</option>
      <option value="PepsinA">PepsinA</option>
      <option value="TrypChymo">TrypChymo</option>
      <option value="Trypsin/P">Trypsin/P</option>
      <option value="V8-DE">V8-DE</option>
      <option value="V8-E">V8-E</option>
      <option value="glutamyl endopeptidase">glutamyl endopeptidase</option>
      <option value="Alpha-lytic protease">Alpha-lytic protease</option>
      <option value="2-iodobenzoate">2-iodobenzoate</option>
      <option value="iodosobenzoate">iodosobenzoate</option>
      <expand macro="list_string_san" name="enzyme"/>
    </param>
    <section name="NeighborSearch" title="Parameters for neighbor peptide search ('in' holds the neighbor candidates)" help="" expanded="false">
      <param name="in_relevant_proteins" argument="-NeighborSearch:in_relevant_proteins" type="data" format="fasta" optional="true" label="These are the relevant proteins, for which we seek neighbors" help=" select fasta data sets(s)"/>
      <param name="missed_cleavages" argument="-NeighborSearch:missed_cleavages" type="integer" value="0" label="Number of missed cleavages for relevant and neighbor peptides" help=""/>
      <param name="mz_bin_size" argument="-NeighborSearch:mz_bin_size" type="float" value="0.05" label="Bin size for spectra m/z comparison (the original study suggests 0.05 Th for high-res and 1.0005079 Th for low-res spectra)" help=""/>
      <param name="pc_mass_tolerance" argument="-NeighborSearch:pc_mass_tolerance" type="float" value="0.01" label="Maximal precursor mass difference (in Da or ppm; see 'pc_mass_tolerance_unit') between neighbor and relevant peptide" help=""/>
      <param name="pc_mass_tolerance_unit" argument="-NeighborSearch:pc_mass_tolerance_unit" type="select" label="Is 'pc_mass_tolerance' in Da or ppm?" help="">
        <option value="Da" selected="true">Da</option>
        <option value="ppm">ppm</option>
        <expand macro="list_string_san" name="pc_mass_tolerance_unit"/>
      </param>
      <param name="min_peptide_length" argument="-NeighborSearch:min_peptide_length" type="integer" value="5" label="Minimum peptide length (relevant and neighbor peptides)" help=""/>
      <param name="min_shared_ion_fraction" argument="-NeighborSearch:min_shared_ion_fraction" type="float" value="0.25" label="Minimal required overlap 't_i' of b/y ions shared between neighbor candidate and a relevant peptide (t_i &lt;= 2*B12/(B1+B2))" help="Higher values result in fewer neighbors"/>
    </section>
    <section name="Decoy" title="Decoy parameters section" help="" expanded="false">
      <param name="non_shuffle_pattern" argument="-Decoy:non_shuffle_pattern" type="text" optional="true" value="" label="Residues to not shuffle (keep at a constant position when shuffling)" help="Separate by comma, e.g. use 'K,P,R' here">
        <expand macro="list_string_san" name="non_shuffle_pattern"/>
      </param>
      <param name="keepPeptideNTerm" argument="-Decoy:keepPeptideNTerm" type="boolean" truevalue="true" falsevalue="false" checked="true" label="Whether to keep peptide N terminus constant when shuffling / reversing" help=""/>
      <param name="keepPeptideCTerm" argument="-Decoy:keepPeptideCTerm" type="boolean" truevalue="true" falsevalue="false" checked="true" label="Whether to keep peptide C terminus constant when shuffling / reversing" help=""/>
    </section>
    <expand macro="adv_opts_macro">
      <param argument="-shuffle_max_attempts" type="integer" value="30" label="shuffle: maximum attempts to lower the amino acid sequence identity between target and decoy for the shuffle algorithm" help=""/>
      <param argument="-shuffle_sequence_identity_threshold" type="float" value="0.5" label="shuffle: target-decoy amino acid sequence identity threshold for the shuffle algorithm" help="If the sequence identity is above this threshold, shuffling is repeated. In case of repeated failure, individual amino acids are 'mutated' to produce a different amino acid sequence"/>
      <param argument="-seed" type="text" value="1" label="Random number seed (use 'time' for system time)" help="">
        <expand macro="list_string_san" name="seed"/>
      </param>
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="out_neighbor_FLAG">out_neighbor (Output FASTA file with neighbors of relevant peptides (given in 'in_relevant_proteins'))</option>
      <option value="out_relevant_FLAG">out_relevant (Output FASTA file with target+decoy of relevant peptides (given in 'in_relevant_proteins'))</option>
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="fasta"/>
    <data name="NeighborSearch_out_neighbor" label="${tool.name} on ${on_string}: NeighborSearch:out_neighbor" format="txt">
      <filter>OPTIONAL_OUTPUTS is not None and "out_neighbor_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="NeighborSearch_out_relevant" label="${tool.name} on ${on_string}: NeighborSearch:out_relevant" format="txt">
      <filter>OPTIONAL_OUTPUTS is not None and "out_relevant_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_DecoyDatabase_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="shuffle_max_attempts" value="30"/>
        <param name="shuffle_sequence_identity_threshold" value="0.5"/>
        <param name="seed" value="1"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="DecoyDatabase_1.fasta"/>
      </conditional>
      <output name="out" value="DecoyDatabase_1_out.fasta" compare="sim_size" delta_frac="0.7" ftype="fasta"/>
      <param name="decoy_string" value="DECOY_"/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="only_decoy" value="true"/>
      <param name="type" value="protein"/>
      <param name="method" value="reverse"/>
      <param name="enzyme" value="Trypsin"/>
      <section name="NeighborSearch">
        <param name="missed_cleavages" value="0"/>
        <param name="mz_bin_size" value="0.05"/>
        <param name="pc_mass_tolerance" value="0.01"/>
        <param name="pc_mass_tolerance_unit" value="Da"/>
        <param name="min_peptide_length" value="5"/>
        <param name="min_shared_ion_fraction" value="0.25"/>
      </section>
      <section name="Decoy">
        <param name="non_shuffle_pattern" value=""/>
        <param name="keepPeptideNTerm" value="true"/>
        <param name="keepPeptideCTerm" value="true"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_DecoyDatabase_2 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="shuffle_max_attempts" value="30"/>
        <param name="shuffle_sequence_identity_threshold" value="0.5"/>
        <param name="seed" value="42"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="DecoyDatabase_1.fasta"/>
      </conditional>
      <output name="out" value="DecoyDatabase_2_out.fasta" compare="sim_size" delta_frac="0.7" ftype="fasta"/>
      <param name="decoy_string" value="DECOY_SEQ_"/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="only_decoy" value="false"/>
      <param name="type" value="protein"/>
      <param name="method" value="shuffle"/>
      <param name="enzyme" value="Trypsin"/>
      <section name="NeighborSearch">
        <param name="missed_cleavages" value="0"/>
        <param name="mz_bin_size" value="0.05"/>
        <param name="pc_mass_tolerance" value="0.01"/>
        <param name="pc_mass_tolerance_unit" value="Da"/>
        <param name="min_peptide_length" value="5"/>
        <param name="min_shared_ion_fraction" value="0.25"/>
      </section>
      <section name="Decoy">
        <param name="non_shuffle_pattern" value="KRP"/>
        <param name="keepPeptideNTerm" value="true"/>
        <param name="keepPeptideCTerm" value="true"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_DecoyDatabase_3 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="shuffle_max_attempts" value="30"/>
        <param name="shuffle_sequence_identity_threshold" value="0.5"/>
        <param name="seed" value="42"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="DecoyDatabase_1.fasta"/>
      </conditional>
      <output name="out" value="DecoyDatabase_3_out.fasta" compare="sim_size" delta_frac="0.7" ftype="fasta"/>
      <param name="decoy_string" value="DECOY_SEQ_"/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="only_decoy" value="false"/>
      <param name="type" value="protein"/>
      <param name="method" value="shuffle"/>
      <param name="enzyme" value="Chymotrypsin"/>
      <section name="NeighborSearch">
        <param name="missed_cleavages" value="0"/>
        <param name="mz_bin_size" value="0.05"/>
        <param name="pc_mass_tolerance" value="0.01"/>
        <param name="pc_mass_tolerance_unit" value="Da"/>
        <param name="min_peptide_length" value="5"/>
        <param name="min_shared_ion_fraction" value="0.25"/>
      </section>
      <section name="Decoy">
        <param name="non_shuffle_pattern" value="KR"/>
        <param name="keepPeptideNTerm" value="true"/>
        <param name="keepPeptideCTerm" value="true"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_DecoyDatabase_4 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="shuffle_max_attempts" value="30"/>
        <param name="shuffle_sequence_identity_threshold" value="0.5"/>
        <param name="seed" value="42"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="DecoyDatabase_4.fasta"/>
      </conditional>
      <output name="out" value="DecoyDatabase_4_out.fasta" compare="sim_size" delta_frac="0.7" ftype="fasta"/>
      <param name="decoy_string" value="DECOY_SEQ_"/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="only_decoy" value="false"/>
      <param name="type" value="RNA"/>
      <param name="method" value="reverse"/>
      <param name="enzyme" value="Trypsin"/>
      <section name="NeighborSearch">
        <param name="missed_cleavages" value="0"/>
        <param name="mz_bin_size" value="0.05"/>
        <param name="pc_mass_tolerance" value="0.01"/>
        <param name="pc_mass_tolerance_unit" value="Da"/>
        <param name="min_peptide_length" value="5"/>
        <param name="min_shared_ion_fraction" value="0.25"/>
      </section>
      <section name="Decoy">
        <param name="non_shuffle_pattern" value=""/>
        <param name="keepPeptideNTerm" value="true"/>
        <param name="keepPeptideCTerm" value="true"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_DecoyDatabase_7 -->
    <test expect_num_outputs="4">
      <section name="adv_opts">
        <param name="shuffle_max_attempts" value="30"/>
        <param name="shuffle_sequence_identity_threshold" value="0.5"/>
        <param name="seed" value="1"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="DecoyDatabase_7.fasta"/>
      </conditional>
      <output name="out" value="DecoyDatabase_7_out_all.fasta" compare="sim_size" delta_frac="0.7" ftype="fasta"/>
      <param name="decoy_string" value="DECOY_"/>
      <param name="decoy_string_position" value="prefix"/>
      <param name="only_decoy" value="false"/>
      <param name="type" value="protein"/>
      <param name="method" value="reverse"/>
      <param name="enzyme" value="Trypsin"/>
      <section name="NeighborSearch">
        <param name="in_relevant_proteins" value="DecoyDatabase_7_relevant.fasta"/>
        <param name="missed_cleavages" value="0"/>
        <param name="mz_bin_size" value="0.05"/>
        <param name="pc_mass_tolerance" value="0.01"/>
        <param name="pc_mass_tolerance_unit" value="Da"/>
        <param name="min_peptide_length" value="5"/>
        <param name="min_shared_ion_fraction" value="0.25"/>
      </section>
      <output name="NeighborSearch_out_neighbor" value="DecoyDatabase_7_out_neighbors.fasta" compare="sim_size" delta_frac="0.7" ftype="txt"/>
      <output name="NeighborSearch_out_relevant" value="DecoyDatabase_7_out_relevant.fasta" compare="sim_size" delta_frac="0.7" ftype="txt"/>
      <section name="Decoy">
        <param name="non_shuffle_pattern" value=""/>
        <param name="keepPeptideNTerm" value="true"/>
        <param name="keepPeptideCTerm" value="true"/>
      </section>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG,out_neighbor_FLAG,out_relevant_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Creates combined target+decoy sequence database from forward sequence database.


For more information, visit https://openms.de/doxygen/release/3.2.0/html/TOPP_DecoyDatabase.html]]></help>
  <expand macro="references"/>
</tool>
