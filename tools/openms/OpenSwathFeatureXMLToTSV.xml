<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Targeted Experiments and OpenSWATH]-->
<tool id="OpenSwathFeatureXMLToTSV" name="OpenSwathFeatureXMLToTSV" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>Converts a featureXML to a mProphet tsv</description>
  <macros>
    <token name="@EXECUTABLE@">OpenSwathFeatureXMLToTSV</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in_cond.in &&
#if $in_cond.in_select == "no"
mkdir ${' '.join(["'in_cond.in/%s'" % (i) for i, f in enumerate($in_cond.in) if f])} && 
${' '.join(["cp '%s' 'in_cond.in/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
cp '$in_cond.in' 'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)' &&
#end if
mkdir tr &&
cp '$tr' 'tr/${re.sub("[^\w\-_]", "_", $tr.element_identifier)}.$gxy2omsext($tr.ext)' &&
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
#if $in_cond.in_select == "no"
${' '.join(["'in_cond.in/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)'
#end if
-tr
'tr/${re.sub("[^\w\-_]", "_", $tr.element_identifier)}.$gxy2omsext($tr.ext)'
-out
'out/output.${gxy2omsext("csv")}'

## Postprocessing
&& mv 'out/output.${gxy2omsext("csv")}' '$out'
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <conditional name="in_cond">
      <param name="in_select" type="select" label="Run tool in batch mode for -in">
        <option value="no">No: process all datasets jointly</option>
        <option value="yes">Yes: process each dataset in an independent job</option>
      </param>
      <when value="no">
        <param argument="-in" type="data" format="featurexml" multiple="true" label="Input files separated by blank" help=" select featurexml data sets(s)"/>
      </when>
      <when value="yes">
        <param argument="-in" type="data" format="featurexml" label="Input files separated by blank" help=" select featurexml data sets(s)"/>
      </when>
    </conditional>
    <param argument="-tr" type="data" format="traml" label="TraML transition file" help=" select traml data sets(s)"/>
    <param argument="-short_format" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Whether to write short (one peptide per line) or long format (one transition per line)" help=""/>
    <param argument="-best_scoring_peptide" type="text" optional="true" value="" label="If only the best scoring feature per peptide should be printed, give the variable name" help="">
      <expand macro="list_string_san" name="best_scoring_peptide"/>
    </param>
    <expand macro="adv_opts_macro">
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="csv"/>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_OpenSwathFeatureXMLToTSV_test_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="OpenSwathFeatureXMLToTSV_input.featureXML"/>
      </conditional>
      <param name="tr" value="OpenSwathFeatureXMLToTSV_input.TraML"/>
      <output name="out" value="OpenSwathFeatureXMLToTSV_output.short.csv" compare="sim_size" delta_frac="0.7" ftype="csv"/>
      <param name="short_format" value="true"/>
      <param name="best_scoring_peptide" value=""/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_OpenSwathFeatureXMLToTSV_test_2 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="OpenSwathFeatureXMLToTSV_input.featureXML"/>
      </conditional>
      <param name="tr" value="OpenSwathFeatureXMLToTSV_input.TraML"/>
      <output name="out" value="OpenSwathFeatureXMLToTSV_output.long.csv" compare="sim_size" delta_frac="0.7" ftype="csv"/>
      <param name="short_format" value="false"/>
      <param name="best_scoring_peptide" value=""/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_OpenSwathFeatureXMLToTSV_test_3 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="OpenSwathFeatureXMLToTSV_input.featureXML"/>
      </conditional>
      <param name="tr" value="OpenSwathFeatureXMLToTSV_input.TraML"/>
      <output name="out" value="OpenSwathFeatureXMLToTSV_3_output.short.csv" compare="sim_size" delta_frac="0.7" ftype="csv"/>
      <param name="short_format" value="true"/>
      <param name="best_scoring_peptide" value="main_var_xx_lda_prelim_score"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Converts a featureXML to a mProphet tsv.


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_OpenSwathFeatureXMLToTSV.html]]></help>
  <expand macro="references"/>
</tool>
