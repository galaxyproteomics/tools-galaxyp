<?xml version='1.0' encoding='UTF-8'?>
<macros>
    
<!-- a copy of a FileConverter test without the advanced options used
     in order to check if this works (all other tests enable advanced) -->
<xml name="manutest_FileConverter">
<test expect_num_outputs="1">
  <param name="in" value="FileConverter_1_input.mzData"/>
  <output name="out" file="FileConverter_1_output.mzML" compare="sim_size" delta="5700" ftype="mzml"/>
  <param name="out_type" value="mzML"/>
</test>
</xml>
<!-- tests contributed by the galaxyproteomics community -->
<xml name="manutest_ClusterMassTracesByPrecursor">
  <test expect_num_outputs="1"><!-- test with arbitarily chosen consensusXML -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in_ms1" ftype="consensusxml" value="ConsensusMapNormalizer_input.consensusXML"/>
    <param name="in_swath" ftype="consensusxml" value="ConsensusMapNormalizer_input.consensusXML"/>
    <output name="out" ftype="mzml" value="ClusterMassTracesByPrecursor.mzml"/>
  </test>
</xml>
<xml name="manutest_ClusterMassTraces"> 
  <test expect_num_outputs="1"><!-- test with arbitarily chosen consensusXML -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="consensusxml" value="ConsensusMapNormalizer_input.consensusXML"/>
    <output name="out" ftype="mzml" value="ClusterMassTraces.mzml"/>
  </test>
</xml>
<xml name="manutest_CVInspector">
  <!-- test with https://raw.githubusercontent.com/HUPO-PSI/mzIdentML/master/cv/XLMOD.obo listed here https://www.psidev.info/groups/controlled-vocabularies, mapping file from share/OpenMS/MAPPING/ms-mapping.xml, see currently not working, see: https://github.com/OpenMS/OpenMS/pull/4425 -->
  <test expect_num_outputs="1">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="cv_files" ftype="obo" value="CHEMISTRY/XLMOD.obo"/>
    <param name="cv_names" value="XLMOD"/>
    <param name="mapping_file" value="MAPPING/ms-mapping.xml"/>
    <param name="OPTIONAL_OUTPUTS" value="html_FLAG"/>
    <output name="html" ftype="html" value="CVInspector.html"/>
  </test>
</xml>
<xml name="manutest_DeMeanderize">
  <test expect_num_outputs="1"><!-- test with the output of a MSsimulator output generated by a test below -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="MSsimulator_MALDI.mzml"/>
	<output name="out" ftype="mzml" value="DeMeanderize.mzml"/>
  </test>
</xml>
<xml name="manutest_Digestor">
  <test expect_num_outputs="1"><!-- just using some random fasta, in contrast to DigestorMotif idXML/fasta output possible, testing for the non-default fasta option -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="fasta" value="random.fa"/>
    <output name="out" ftype="fasta" value="Digestor.fasta"/>
    <param name="out_type" value="fasta"/>
  </test>
</xml>
<xml name="manutest_EICExtractor">
  <test expect_num_outputs="1"><!-- just using some random test data -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="spectra.mzML"/>
    <param name="pos" ftype="edta" value="FileConverter_10_input.edta"/>
    <output name="out" ftype="csv" value="EICExtractor.csv" lines_diff="2"/>
  </test>
</xml>
<xml name="manutest_ERPairFinder">
  <!-- TODO -->
</xml>
<xml name="manutest_FeatureFinderIsotopeWavelet">
  <test expect_num_outputs="1"><!--just use the input of another FeatureFinder -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="FeatureFinderCentroided_1_input.mzML"/>
    <output name="out" value="FeatureFinderIsotopeWavelet.featureXML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_FFEval">
  <test expect_num_outputs="2"><!-- comparing an arbitarty FeatureFinder output with itself -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="FeatureFinderCentroided_1_output.featureXML"/>
    <param name="truth" value="FeatureFinderCentroided_1_output.featureXML"/>
    <param name="OPTIONAL_OUTPUTS" value="out_FLAG,out_roc_FLAG"/>
    <output name="out" value="FFEval.featureXML" compare="sim_size"/>
	<output name="out_roc" value="FFEval_roc.csv" ftype="csv"/>
  </test>
</xml>
<xml name="manutest_IDExtractor">
  <test expect_num_outputs="1"><!--  -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="idxml" value="MSGFPlusAdapter_1_out.idXML"/>
    <param name="best_hits" value="true"/>
    <param name="number_of_peptides" value="1"/>
    <output name="out" value="IDExtractor.idXML" compare="sim_size"/>
  </test>
</xml>
<!-- adapted from macros_discarded_auto.xml (due to prefix-output)-->
<xml name="manutest_IDRipper"> 
<test expect_num_outputs="2">
  <conditional name="adv_opts_cond">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="force" value="false"/>
    <param name="test" value="true"/>
  </conditional>
  <param name="in" value="IDRipper_1_input.idXML"/>
    <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
  <output_collection name="out_path" count="2">
    <element name="IDRipper_1_output_1" file="IDRipper_1_output1.idXML" ftype="idxml" compare="sim_size" delta="5700"/>
    <element name="IDRipper_1_output_2" file="IDRipper_1_output2.idXML" ftype="idxml" compare="sim_size" delta="5700"/>
  </output_collection>
  <output name="ctd_out" ftype="xml">
    <assert_contents>
      <is_valid_xml/>
    </assert_contents>
  </output>
</test>
<test expect_num_outputs="2">
  <conditional name="adv_opts_cond">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="force" value="false"/>
    <param name="test" value="true"/>
  </conditional>
  <param name="in" value="IDRipper_2_input.idXML"/>
  <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
  <output_collection name="out_path" count="2">
    <element name="IDRipper_2_output1" file="IDRipper_2_output1.idXML" ftype="idxml"/>
    <element name="IDRipper_2_output2" file="IDRipper_2_output2.idXML" ftype="idxml"/>
  </output_collection>
  <output name="ctd_out" ftype="xml">
    <assert_contents>
      <is_valid_xml/>
    </assert_contents>
  </output>
</test>
<test expect_num_outputs="2">
  <conditional name="adv_opts_cond">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="force" value="false"/>
    <param name="test" value="true"/>
  </conditional>
  <param name="in" value="IDRipper_3_output.idXML"/>
  <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
  <output_collection name="out_path" count="2">
    <element name="IDRipper_3_input1" file="IDRipper_3_input1.idXML" ftype="idxml"/>
    <element name="IDRipper_3_input2" file="IDRipper_3_input2.idXML" ftype="idxml"/>
  </output_collection>
  <output name="ctd_out" ftype="xml">
    <assert_contents>
      <is_valid_xml/>
    </assert_contents>
  </output>
</test>
</xml>
<xml name="manutest_LabeledEval">
  <test expect_num_outputs="1"><!-- comparing an arbitarty featureXML that has a corresponding consensusXML -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="FeatureLinkerLabeled_1_input.featureXML"/>
    <param name="truth" value="FeatureLinkerLabeled_1_output.consensusXML"/>
    <output name="stdout" value="LabeledEval.txt" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_MapStatistics">
  <test expect_num_outputs="1"><!-- test with a featureXML input  -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="featurexml" value="SiriusAdapter_3_input.featureXML"/>
    <output name="out" ftype="txt" value="MapStatistics.txt"/>
  </test>
  <test expect_num_outputs="1"><!-- test with a consensusxml input -->
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="consensusxml" value="ConsensusXMLFile_1.consensusXML"/>
    <output name="out" ftype="txt" value="MapStatistics2.txt"/>
  </test>
</xml>
<xml name="manutest_MetaboliteSpectralMatcher">
    <!-- same input as used in the MSGF+Adapter, should use database CHEMISTRY/MetaboliteSpectralDB.mzML -->
  <test expect_num_outputs="1"><!-- same input as used in the MSGF+Adapter, used as input and database -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="spectra.mzML"/>
    <param name="database" value="MetaboliteSpectralDB.mzML"/>
    <output name="out" ftype="mztab" value="MetaboliteSpectralMatcher.mzTab"/>
  </test>
</xml>
<xml name="manutest_MRMPairFinder">
  <!-- TODO no idea about a useful input for pair_in -->
</xml>
<xml name="manutest_MSSimulator">
  <test expect_num_outputs="1"><!-- same input as used in the MSGF+Adapter -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="fasta" value="DecoyDatabase_1.fasta"/>
    <param name="OPTIONAL_OUTPUTS" value="out_FLAG"/>
    <output name="out" ftype="mzml" value="MSsimulator.mzml" compare="sim_size" delta="1000000" delta_frac="0.1"/>
    <param name="algorithm|RandomNumberGenerators|biological" value="reproducible"/>
    <param name="algorithm|RandomNumberGenerators|technical" value="reproducible"/>
  </test>
  <test expect_num_outputs="1"><!-- same input as used in the MSGF+Adapter generate MALDI output for use in the test for DeMeanderize -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="fasta" value="DecoyDatabase_1.fasta"/>
    <param name="OPTIONAL_OUTPUTS" value="out_FLAG"/>
    <output name="out" ftype="mzml" value="MSsimulator_MALDI.mzml" compare="sim_size" delta="1000000" delta_frac="0.1"/>
    <param name="algorithm|RandomNumberGenerators|biological" value="reproducible"/>
    <param name="algorithm|RandomNumberGenerators|technical" value="reproducible"/>
    <param name="algorithm|MSSim|Global|ionization_type" value="MALDI"/>
  </test>
</xml>
<!-- adapted from macros_discarded_auto.xml (due to prefix-output)-->
<xml name="manutest_MzMLSplitter">
<test expect_num_outputs="2">
  <conditional name="adv_opts_cond">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="force" value="false"/>
    <param name="test" value="true"/>
  </conditional>
  <param name="in" value="FileFilter_1_input.mzML"/>
  <param name="parts" value="2"/>
  <param name="size" value="0"/>
  <param name="unit" value="MB"/>
  <param name="no_chrom" value="false"/>
  <param name="no_spec" value="false"/>
  <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
  <output name="ctd_out" ftype="xml">
    <assert_contents>
      <is_valid_xml/>
    </assert_contents>
  </output>
  <output_collection name="out" type="list" count="2">
    <element name="part1of2" file="MzMLSplitter_1_output_part1of2.mzML" ftype="mzml"/>
    <element name="part2of2" file="MzMLSplitter_1_output_part2of2.mzML" ftype="mzml"/>
  </output_collection>
</test>
<test expect_num_outputs="2">
  <conditional name="adv_opts_cond">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="force" value="false"/>
    <param name="test" value="true"/>
  </conditional>
  <param name="in" value="FileFilter_1_input.mzML"/>
  <param name="parts" value="1"/>
  <param name="size" value="40"/>
  <param name="unit" value="KB"/>
  <param name="no_chrom" value="false"/>
  <param name="no_spec" value="false"/>
  <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
  <output name="ctd_out" ftype="xml">
    <assert_contents>
      <is_valid_xml/>
    </assert_contents>
  </output>
  <output_collection name="out" type="list" count="2">
    <element name="part1of2" file="MzMLSplitter_2_output_part1of2.mzML" ftype="mzml"/>
    <element name="part2of2" file="MzMLSplitter_2_output_part2of2.mzML" ftype="mzml"/>
  </output_collection>
</test>
</xml>
<xml name="manutest_OpenSwathDIAPreScoring">
  <!-- data from a test that included all the needed test files -->
  <test>
    <param name="tr" value="OpenSwathWorkflow_1_input.TraML"/>
    <param name="swath_files" value="OpenSwathAnalyzer_2_swathfile.mzML"/>
    <output_collection name="output_files" count="1">
      <element name="OpenSwathAnalyzer_2_swathfile_mzML.tsv" file="OpenSwathDIAPreScoring.tsv" ftype="tabular"/>
    </output_collection>
  </test>
  
  <!-- test with two inputs (actually the same file .. symlinked) -->
  <test>
    <param name="tr" value="OpenSwathWorkflow_1_input.TraML"/>
    <param name="swath_files" value="OpenSwathDIAPreScoring_in1.mzML,OpenSwathDIAPreScoring_in2.mzML"/>
    <output_collection name="output_files" count="2">
      <element name="OpenSwathDIAPreScoring_in1.tsv" file="OpenSwathDIAPreScoring.tsv" ftype="tabular"/>
      <element name="OpenSwathDIAPreScoring_in1.tsv" file="OpenSwathDIAPreScoring.tsv" ftype="tabular"/>
    </output_collection>
  </test>
</xml>
<!-- adapted from macros_discarded_auto.xml (due to prefix-output)-->
<xml name="manutest_OpenSwathFileSplitter">
  <test expect_num_outputs="3">
    <conditional name="adv_opts_cond">
      <param name="adv_opts_selector" value="advanced"/>
      <param name="force" value="false"/>
      <param name="test" value="true"/>
    </conditional>
    <param name="in" value="OpenSwathWorkflow_1_input.mzML"/>
    <param name="OPTIONAL_OUTPUTS" value="out_qc_FLAG,ctd_out_FLAG"/>
    <output_collection name="outputDirectory" count="6">
      <element name="OpenSwathWorkflow_1_input_mzML_4" file="openswath_tmpfile_4.mzML" ftype="mzml"/>
      <element name="OpenSwathWorkflow_1_input_mzML_ms1" file="openswath_tmpfile_ms1.mzML" ftype="mzml"/>
    </output_collection>
    <output name="out_qc" file="OpenSwathFileSplitter_1.json" compare="sim_size" delta="5700" ftype="json"/>
    <output name="ctd_out" ftype="xml">
      <assert_contents>
        <is_valid_xml/>
      </assert_contents>
    </output>
  </test>
</xml>
<xml name="manutest_OpenSwathRewriteToFeatureXML">
  <test expect_num_outputs="1"><!-- same input as used in the MSGF+Adapter -->
    <param name="featureXML" value="OpenSwathFeatureXMLToTSV_input.featureXML"/>
    <param name="adv_opts_cond|test" value="true"/>
    <output name="out" ftype="featurexml" value="OpenSwathRewriteToFeatureXML.featureXML"/>
  </test>
</xml>
<xml name="manutest_PepNovoAdapter">
  <test expect_num_outputs="1"><!-- adapted from (dysfunctional) OMS 3rdParty tests (but model selection
             unclear https://github.com/OpenMS/OpenMS/issues/4719)-->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="PepNovo_1.mzML"/>
    <output name="out" ftype="idxml" value="PepNovoAdapter_3_output.idXML"/>
    <param name="model" value="LTQ_COMP"/>
  </test>
  <test expect_num_outputs="1"><!-- same input as used in the MSGF+Adapter -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="PepNovo_1.mzML"/>
    <output name="out" ftype="idxml" value="PepNovoAdapter_3_output.idXML"/>
    <param name="model" value="LTQ_COMP"/>
  </test>
</xml>
<xml name="manutest_PhosphoScoring">
  <test expect_num_outputs="1"><!-- same input as used in the MSGF+Adapter -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="spectra.mzML"/>
    <param name="id" ftype="idxml" value="MSGFPlusAdapter_1_out1.tmp"/>
    <output name="out" ftype="idxml" value="PhosphoScoring.idxml" compare="sim_size" delta="5700"/>
  </test>
</xml>
<xml name="manutest_PSMFeatureExtractor">
  <test expect_num_outputs="1"><!-- using the idXML outputs of two SearchAdapters that should be compatible -->
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="idxml" value="MSGFPlusAdapter_1_out.idXML,XTandemAdapter_1_out.idXML"/>
    <param name="multiple_search_engines" value="true"/>
    <param name="adv_opts_cond|adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|skip_db_check" value="true"/>
    <param name="out_type" value="idxml"/>
    <output name="out" ftype="idxml" value="PSMFeatureExtractor.idxml" compare="sim_size" delta="500"/>
  </test>
  <test expect_num_outputs="1"><!-- using the idXML outputs of two SearchAdapters that should be compatible -->
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="idxml" value="MSGFPlusAdapter_1_out.idXML,XTandemAdapter_1_out.idXML"/>
    <param name="multiple_search_engines" value="true"/>
    <param name="adv_opts_cond|adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|skip_db_check" value="true"/>
    <param name="out_type" value="mzid"/>
    <output name="out" ftype="mzid" value="PSMFeatureExtractor.mzid" compare="sim_size" delta="500"/>
  </test>
</xml>
<xml name="manutest_QCCalculator">
  <test expect_num_outputs="1"><!-- took test data from another test w mzML input -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="OpenPepXL_input.mzML"/>
    <output name="out" ftype="qcml" value="QCCalculator1.qcML" compare="sim_size" delta="250"/>
  </test>
  <test expect_num_outputs="1"><!-- took test data from another test w mzML,idXML,consensusXML input -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="OpenPepXL_input.mzML"/>
    <param name="id" ftype="idxml" value="OpenPepXL_output.idXML"/>
    <param name="consensus" ftype="consensusxml" value="OpenPepXL_input.consensusXML"/>
    <output name="out" ftype="qcml" value="QCCalculator2.qcML" compare="sim_size" delta="250"/>
  </test>
  <test expect_num_outputs="1"><!-- took test data from another test w mzML,idXML,featureXML input -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="IDMapper_4_input.mzML"/>
    <param name="id" ftype="idxml" value="IDMapper_4_input.idXML"/>
    <param name="feature" ftype="featurexml" value="IDMapper_4_input.featureXML"/>
    <output name="out" ftype="qcml" value="QCCalculator3.qcML" compare="sim_size" delta="250"/>
  </test>
</xml>
<xml name="manutest_QCEmbedder">
    <!--TODO-->
</xml>
<xml name="manutest_QCExporter">
    <!--TODO-->
</xml>
<xml name="manutest_QCExtractor">
    <!--TODO-->
</xml>
<xml name="manutest_QCImporter">
    <!--TODO-->
</xml>
<xml name="manutest_QCMerger">
  <test expect_num_outputs="1"><!-- just using 2 outputs from QCCalculator as input (no2 did not work) -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="qcml" value="QCCalculator1.qcML,QCCalculator3.qcML"/>
    <output name="out" ftype="qcml" value="QCMerger.qcML"/>
  </test>
</xml>
<xml name="manutest_QCShrinker">
  <test expect_num_outputs="1"><!-- just using an output of QCCalculator as input  -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="qcml" value="QCCalculator1.qcML"/>
    <output name="out" ftype="qcml" value="QCShrinker.qcML"/>
  </test>
</xml>
<xml name="manutest_RNADigestor">
  <test expect_num_outputs="1"><!--random RNAsequence input -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="fasta" value="random_RNA.fa"/>
    <output name="out" ftype="fasta" value="RNADigestor.fasta"/>
  </test>
</xml>
<xml name="manutest_RNPxlXICFilter">
  <test expect_num_outputs="1"><!-- just chosen an arbitrary input (2x the same which is likely nonsense, but sufficient for the test) and autgenerated output-->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="control" ftype="mzml" value="FileFilter_1_input.mzML"/>
    <param name="treatment" ftype="mzml" value="FileFilter_1_input.mzML"/>
    <output name="out" ftype="mzml" value="RNPxlXICFilter.mzML"/>
  </test>
</xml>
<xml name="manutest_RTEvaluation">
  <!-- just chosen an arbitrary input and autgenerated output-->
  <test expect_num_outputs="1">
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="idxml" value="PeptideIndexer_1.idXML"/>
    <output name="out" ftype="tabular" value="RTEvaluation.tsv"/>
  </test>
</xml>
<xml name="manutest_SemanticValidator">
  <test expect_num_outputs="1"><!-- just chosen an arbitrary input (same as XMLValidator) and autgenerated output-->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="FileFilter_1_input.mzML"/>
    <param name="mapping_file" ftype="xml" value="MAPPING/ms-mapping.xml"/>
    <output name="stdout" ftype="txt" value="SemanticValidator.stdout" lines_diff="4">
       <assert_contents><has_text text="Congratulations, the file is valid!"/></assert_contents>
    </output>
  </test>
</xml>
<xml name="manutest_SequenceCoverageCalculator">
  <test expect_num_outputs="1"><!-- took test data from another tool that also takes idXML and fasta as input -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in_database" value="PeptideIndexer_1.fasta" ftype="fasta"/>
    <param name="in_peptides" value="SequenceCoverageCalculator_1.idXML" ftype="idxml"/>
    <output name="out" value="SequenceCoverageCalculator.txt" ftype="txt" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpecLibCreator">
  <!--TODO could not find test data -->
</xml>
<xml name="manutest_SpectraFilterBernNorm">
  <test expect_num_outputs="1"><!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterBernNorm.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraFilterMarkerMower">
  <test expect_num_outputs="1"><!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterMarkerMower.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraFilterNLargest">
  <test expect_num_outputs="1"><!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterNLargest.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraFilterNormalizer">
  <test expect_num_outputs="1"><!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterNormalizer.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraFilterParentPeakMower">
  <test expect_num_outputs="1"><!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterParentPeakMower.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraFilterScaler">
  <test expect_num_outputs="1"> <!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterScaler.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraFilterThresholdMower">
  <test expect_num_outputs="1"><!-- copy pasted from autotest_SpectraFilterWindowMower (1st test) and autogenrated output -->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" value="SpectraFilterSqrtMower_1_input.mzML"/>
    <output name="out" value="SpectraFilterThresholdMower.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SpectraMerger">
  <test expect_num_outputs="1"><!-- just chosen an arbitrary input and autgenerated output-->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="NovorAdapter_in.mzML"/>
    <output name="out" ftype="mzml" value="SpectraMerger_1.mzML" compare="sim_size"/>
  </test>
</xml>
<xml name="manutest_SvmTheoreticalSpectrumGeneratorTrainer">
<!-- -TODO model_output_file creates multiple files-->
</xml>
<xml name="manutest_TransformationEvaluation">
  <test expect_num_outputs="1"><!-- just chosen an arbitrary input and autgenerated output-->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="trafoxml" value="FileInfo_16_input.trafoXML"/>
    <param name="OPTIONAL_OUTPUTS" value="out_FLAG"/>
    <output name="out" ftype="trafoxml" value="TransformationEvaluation.trafoXML" compare="sim_size" delta="100000000"/>
  </test>
</xml>
<xml name="manutest_XMLValidator">
  <test expect_num_outputs="1"><!-- just chosen an arbitrary input and autgenerated output-->
    <param name="adv_opts_selector" value="advanced"/>
    <param name="adv_opts_cond|test" value="true"/>
    <param name="in" ftype="mzml" value="FileFilter_1_input.mzML"/>
    <output name="stdout" ftype="txt" value="XMLValidator.stdout" lines_diff="4">
       <assert_contents><has_text text="Success: the file is valid!"/></assert_contents>
    </output>
  </test>
</xml>
<xml name="manutest_MetaboliteAdductDecharger"/><xml name="manutest_IDMapper"/><xml name="manutest_ProteinQuantifier"/><xml name="manutest_PeakPickerIterative"/><xml name="manutest_FeatureLinkerUnlabeledQT"/><xml name="manutest_TICCalculator"/><xml name="manutest_IDFilter"/><xml name="manutest_IDPosteriorErrorProbability"/><xml name="manutest_FeatureFinderIdentification"/><xml name="manutest_XFDR"/><xml name="manutest_OpenSwathWorkflow"/><xml name="manutest_MassCalculator"/><xml name="manutest_IDFileConverter"/><xml name="manutest_MultiplexResolver"/><xml name="manutest_FeatureFinderSuperHirn"/><xml name="manutest_AssayGeneratorMetabo"/><xml name="manutest_MassTraceExtractor"/><xml name="manutest_SiriusAdapter"/><xml name="manutest_IDMerger"/><xml name="manutest_MSstatsConverter"/><xml name="manutest_FileMerger"/><xml name="manutest_Decharger"/><xml name="manutest_PTPredict"/><xml name="manutest_XTandemAdapter"/><xml name="manutest_FeatureFinderMetabo"/><xml name="manutest_CruxAdapter"/><xml name="manutest_OpenSwathConfidenceScoring"/><xml name="manutest_PrecursorIonSelector"/><xml name="manutest_ConsensusMapNormalizer"/><xml name="manutest_RTPredict"/><xml name="manutest_PercolatorAdapter"/><xml name="manutest_ProteinInference"/><xml name="manutest_OpenSwathDecoyGenerator"/><xml name="manutest_TextExporter"/><xml name="manutest_FeatureFinderCentroided"/><xml name="manutest_DecoyDatabase"/><xml name="manutest_SpectraFilterWindowMower"/><xml name="manutest_NoiseFilterGaussian"/><xml name="manutest_MaRaClusterAdapter"/><xml name="manutest_ConsensusID"/><xml name="manutest_FileFilter"/><xml name="manutest_InclusionExclusionListCreator"/><xml name="manutest_FeatureLinkerUnlabeledKD"/><xml name="manutest_NovorAdapter"/><xml name="manutest_OpenPepXL"/><xml name="manutest_SeedListGenerator"/><xml name="manutest_FalseDiscoveryRate"/><xml name="manutest_OpenPepXLLF"/><xml name="manutest_SpecLibSearcher"/><xml name="manutest_IDConflictResolver"/><xml name="manutest_MRMMapper"/><xml name="manutest_OMSSAAdapter"/><xml name="manutest_ExternalCalibration"/><xml name="manutest_PeakPickerHiRes"/><xml name="manutest_MascotAdapter"/><xml name="manutest_FeatureFinderMultiplex"/><xml name="manutest_MetaProSIP"/><xml name="manutest_FuzzyDiff"/><xml name="manutest_TargetedFileConverter"/><xml name="manutest_MapAlignerIdentification"/><xml name="manutest_IDRTCalibration"/><xml name="manutest_MRMTransitionGroupPicker"/><xml name="manutest_RTModel"/><xml name="manutest_OpenSwathAssayGenerator"/><xml name="manutest_IDSplitter"/><xml name="manutest_OpenSwathMzMLFileCacher"/><xml name="manutest_HighResPrecursorMassCorrector"/><xml name="manutest_OpenSwathChromatogramExtractor"/><xml name="manutest_OpenSwathAnalyzer"/><xml name="manutest_FeatureLinkerUnlabeled"/><xml name="manutest_CompNovoCID"/><xml name="manutest_DTAExtractor"/><xml name="manutest_FileInfo"/><xml name="manutest_MapAlignerSpectrum"/><xml name="manutest_IsobaricAnalyzer"/><xml name="manutest_LowMemPeakPickerHiRes"/><xml name="manutest_MyriMatchAdapter"/><xml name="manutest_InternalCalibration"/><xml name="manutest_TOFCalibration"/><xml name="manutest_MSGFPlusAdapter"/><xml name="manutest_PTModel"/><xml name="manutest_InspectAdapter"/><xml name="manutest_SpectraFilterSqrtMower"/><xml name="manutest_SimpleSearchEngine"/><xml name="manutest_PeakPickerWavelet"/><xml name="manutest_MapNormalizer"/><xml name="manutest_IDScoreSwitcher"/><xml name="manutest_FeatureLinkerLabeled"/><xml name="manutest_MapRTTransformer"/><xml name="manutest_RNPxlSearch"/><xml name="manutest_PrecursorMassCorrector"/><xml name="manutest_MapAlignerPoseClustering"/><xml name="manutest_MzTabExporter"/><xml name="manutest_BaselineFilter"/><xml name="manutest_FeatureFinderMRM"/><xml name="manutest_MascotAdapterOnline"/><xml name="manutest_DatabaseFilter"/><xml name="manutest_ProteinResolver"/><xml name="manutest_OpenSwathFeatureXMLToTSV"/><xml name="manutest_FidoAdapter"/><xml name="manutest_AccurateMassSearch"/><xml name="manutest_CompNovo"/><xml name="manutest_LowMemPeakPickerHiResRandomAccess"/><xml name="manutest_OpenSwathRTNormalizer"/><xml name="manutest_PeptideIndexer"/><xml name="manutest_CometAdapter"/><xml name="manutest_NoiseFilterSGolay"/><xml name="manutest_MSFraggerAdapter"/><xml name="manutest_SpectraSTSearchAdapter"/><xml name="manutest_SequestAdapter"/><xml name="manutest_FeatureFinder"/><xml name="manutest_LuciphorAdapter"/><xml name="manutest_GNPSExport"/><xml name="manutest_Epifany"/><xml name="manutest_NucleicAcidSearchEngine"/><xml name="manutest_QualityControl"/><xml name="manutest_FeatureFinderMetaboIdent"/><xml name="manutest_RNAMassCalculator"/><xml name="manutest_MapAlignerTreeGuided"/><xml name="manutest_IDMassAccuracy"/><xml name="manutest_ProteomicsLFQ"/><xml name="manutest_IDDecoyProbability"/><xml name="manutest_DigestorMotif"/><xml name="manutest_DatabaseSuitability"/><xml name="manutest_StaticModification"/></macros>
