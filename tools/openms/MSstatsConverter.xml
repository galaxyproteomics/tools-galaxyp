<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [File Converter]-->
<tool id="MSstatsConverter" name="MSstatsConverter" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>Converter to input for MSstats</description>
  <macros>
    <token name="@EXECUTABLE@">MSstatsConverter</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
cp '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir in_design &&
cp '$in_design' 'in_design/${re.sub("[^\w\-_]", "_", $in_design.element_identifier)}.$gxy2omsext($in_design.ext)' &&
mkdir out &&
## advanced options
  #if $adv_opts.reannotate_filenames_cond.reannotate_filenames:
    mkdir adv_opts.reannotate_filenames_cond.reannotate_filenames &&
    #if $adv_opts.reannotate_filenames_cond.reannotate_filenames_select == "no"
    mkdir ${' '.join(["'adv_opts.reannotate_filenames_cond.reannotate_filenames/%s'" % (i) for i, f in enumerate($adv_opts.reannotate_filenames_cond.reannotate_filenames) if f])} && 
    ${' '.join(["cp '%s' 'adv_opts.reannotate_filenames_cond.reannotate_filenames/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($adv_opts.reannotate_filenames_cond.reannotate_filenames) if f])}
    #else
    cp '$adv_opts.reannotate_filenames_cond.reannotate_filenames' 'adv_opts.reannotate_filenames_cond.reannotate_filenames/${re.sub("[^\w\-_]", "_", $adv_opts.reannotate_filenames_cond.reannotate_filenames.element_identifier)}.$gxy2omsext($adv_opts.reannotate_filenames_cond.reannotate_filenames.ext)' &&
    #end if
  #end if


## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-in_design
'in_design/${re.sub("[^\w\-_]", "_", $in_design.element_identifier)}.$gxy2omsext($in_design.ext)'
-out
'out/output.${gxy2omsext("csv")}'
## advanced options
  #if $adv_opts.reannotate_filenames_cond.reannotate_filenames:
    -reannotate_filenames
    #if $adv_opts.reannotate_filenames_cond.reannotate_filenames_select == "no"
    ${' '.join(["'adv_opts.reannotate_filenames_cond.reannotate_filenames/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($adv_opts.reannotate_filenames_cond.reannotate_filenames) if f])}
    #else
    'adv_opts.reannotate_filenames_cond.reannotate_filenames/${re.sub("[^\w\-_]", "_", $adv_opts.reannotate_filenames_cond.reannotate_filenames.element_identifier)}.$gxy2omsext($adv_opts.reannotate_filenames_cond.reannotate_filenames.ext)'
    #end if
  #end if


## Postprocessing
&& mv 'out/output.${gxy2omsext("csv")}' '$out'
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param argument="-in" type="data" format="consensusxml" label="Input consensusXML with peptide intensities" help=" select consensusxml data sets(s)"/>
    <param argument="-in_design" type="data" format="tabular" label="Experimental Design file" help=" select tabular data sets(s)"/>
    <param argument="-method" type="select" label="Method used in the experiment(label free [LFQ], isobaric labeling [ISO]))" help="">
      <option value="LFQ" selected="true">LFQ</option>
      <option value="ISO">ISO</option>
      <expand macro="list_string_san" name="method"/>
    </param>
    <param argument="-msstats_bioreplicate" type="text" value="MSstats_BioReplicate" label="Which column in the condition table should be used for MSstats 'BioReplicate'" help="">
      <expand macro="list_string_san" name="msstats_bioreplicate"/>
    </param>
    <param argument="-msstats_condition" type="text" value="MSstats_Condition" label="Which column in the condition table should be used for MSstats 'Condition'" help="">
      <expand macro="list_string_san" name="msstats_condition"/>
    </param>
    <param argument="-msstats_mixture" type="text" value="MSstats_Mixture" label="Which column in the condition table should be used for MSstats 'Mixture'" help="">
      <expand macro="list_string_san" name="msstats_mixture"/>
    </param>
    <param argument="-labeled_reference_peptides" type="boolean" truevalue="true" falsevalue="false" checked="false" label="If set, IsotopeLabelType is 'H', else 'L'" help=""/>
    <expand macro="adv_opts_macro">
      <conditional name="reannotate_filenames_cond">
        <param name="reannotate_filenames_select" type="select" label="Run tool in batch mode for -reannotate_filenames">
          <option value="no">No: process all datasets jointly</option>
          <option value="yes">Yes: process each dataset in an independent job</option>
        </param>
        <when value="no">
          <param argument="-reannotate_filenames" type="data" format="mzml" multiple="true" optional="true" label="Overwrite MS file names in consensusXML" help=" select mzml data sets(s)"/>
        </when>
        <when value="yes">
          <param argument="-reannotate_filenames" type="data" format="mzml" optional="true" label="Overwrite MS file names in consensusXML" help=" select mzml data sets(s)"/>
        </when>
      </conditional>
      <param argument="-retention_time_summarization_method" type="select" label="How indistinguishable peptidoforms at different retention times should be treated" help="This is usually necessary for LFQ experiments and therefore defaults to 'max'. In case of TMT/iTRAQ, MSstatsTMT does the aggregation itself later and the parameter always resets to manual (i.e. is unused)">
        <option value="manual">manual</option>
        <option value="max" selected="true">max</option>
        <option value="min">min</option>
        <option value="mean">mean</option>
        <option value="sum">sum</option>
        <expand macro="list_string_san" name="retention_time_summarization_method"/>
      </param>
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="csv"/>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_MSstatsConverter_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="retention_time_summarization_method" value="max"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="MSstatsConverter_1_in.consensusXML"/>
      <param name="in_design" value="MSstatsConverter_1_design.tsv" ftype="tabular"/>
      <param name="method" value="LFQ"/>
      <param name="msstats_bioreplicate" value="MSstats_BioReplicate"/>
      <param name="msstats_condition" value="MSstats_Condition"/>
      <param name="msstats_mixture" value="MSstats_Mixture"/>
      <param name="labeled_reference_peptides" value="false"/>
      <output name="out" value="MSstatsConverter_1_out.csv" compare="sim_size" delta_frac="0.7" ftype="csv"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_MSstatsConverter_2 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="retention_time_summarization_method" value="manual"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="MSstatsConverter_2_in.consensusXML"/>
      <param name="in_design" value="MSstatsConverter_2_design.tsv" ftype="tabular"/>
      <param name="method" value="ISO"/>
      <param name="msstats_bioreplicate" value="MSstats_BioReplicate"/>
      <param name="msstats_condition" value="MSstats_Condition"/>
      <param name="msstats_mixture" value="MSstats_Mixture"/>
      <param name="labeled_reference_peptides" value="false"/>
      <output name="out" value="MSstatsConverter_2_out.csv" compare="sim_size" delta_frac="0.7" ftype="csv"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_MSstatsConverter_3 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="retention_time_summarization_method" value="manual"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="MSstatsConverter_3_in.consensusXML"/>
      <param name="in_design" value="MSstatsConverter_3_design.tsv" ftype="tabular"/>
      <param name="method" value="ISO"/>
      <param name="msstats_bioreplicate" value="MSstats_BioReplicate"/>
      <param name="msstats_condition" value="MSstats_Condition"/>
      <param name="msstats_mixture" value="MSstats_Mixture"/>
      <param name="labeled_reference_peptides" value="false"/>
      <output name="out" value="MSstatsConverter_3_out.csv" compare="sim_size" delta_frac="0.7" ftype="csv"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Converter to input for MSstats


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_MSstatsConverter.html]]></help>
  <expand macro="references"/>
</tool>
