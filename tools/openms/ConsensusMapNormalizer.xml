<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Quantitation]-->
<tool id="ConsensusMapNormalizer" name="ConsensusMapNormalizer" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>Normalizes maps of one consensusXML file</description>
  <macros>
    <token name="@EXECUTABLE@">ConsensusMapNormalizer</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
cp '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-out
'out/output.${gxy2omsext("consensusxml")}'

## Postprocessing
&& mv 'out/output.${gxy2omsext("consensusxml")}' '$out'
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param argument="-in" type="data" format="consensusxml" label="input file" help=" select consensusxml data sets(s)"/>
    <param argument="-algorithm_type" type="select" label="The normalization algorithm that is applied" help="'robust_regression' scales each map by a fator computed from the ratios of non-differential background features (as determined by the ratio_threshold parameter), 'quantile' performs quantile normalization, 'median' scales all maps to the same median intensity, 'median_shift' shifts the median instead of scaling (WARNING: if you have regular, log-normal MS data, 'median_shift' is probably the wrong choice. Use only if you know what you're doing!)">
      <option value="robust_regression" selected="true">robust_regression</option>
      <option value="median">median</option>
      <option value="median_shift">median_shift</option>
      <option value="quantile">quantile</option>
      <expand macro="list_string_san" name="algorithm_type"/>
    </param>
    <param argument="-ratio_threshold" type="float" min="0.001" max="1.0" value="0.67" label="Only for 'robust_regression': the parameter is used to distinguish between non-outliers (ratio_threshold &lt; intensity ratio &lt; 1/ratio_threshold) and outliers" help=""/>
    <expand macro="adv_opts_macro">
      <param argument="-accession_filter" type="text" optional="true" value="" label="Use only features with accessions (partially) matching this regular expression for computing the normalization factors" help="Useful, e.g., if you have known house keeping proteins in your samples. When this parameter is empty or the regular expression matches the empty string, all features are used (even those without an ID). No effect if quantile normalization is used">
        <expand macro="list_string_san" name="accession_filter"/>
      </param>
      <param argument="-description_filter" type="text" optional="true" value="" label="Use only features with description (partially) matching this regular expression for computing the normalization factors" help="Useful, e.g., if you have known house keeping proteins in your samples. When this parameter is empty or the regular expression matches the empty string, all features are used (even those without an ID). No effect if quantile normalization is used">
        <expand macro="list_string_san" name="description_filter"/>
      </param>
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="consensusxml"/>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_ConsensusMapNormalizer_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="accession_filter" value=""/>
        <param name="description_filter" value=""/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <param name="in" value="ConsensusMapNormalizer_input.consensusXML"/>
      <output name="out" value="ConsensusMapNormalizer_output.consensusXML" compare="sim_size" delta_frac="0.7" ftype="consensusxml"/>
      <param name="algorithm_type" value="robust_regression"/>
      <param name="ratio_threshold" value="0.67"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Normalizes maps of one consensusXML file


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_ConsensusMapNormalizer.html]]></help>
  <expand macro="references"/>
</tool>
