<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [Identification Processing]-->
<tool id="PSMFeatureExtractor" name="PSMFeatureExtractor" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>Computes extra features for each input PSM</description>
  <macros>
    <token name="@EXECUTABLE@">PSMFeatureExtractor</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in_cond.in &&
#if $in_cond.in_select == "no"
mkdir ${' '.join(["'in_cond.in/%s'" % (i) for i, f in enumerate($in_cond.in) if f])} && 
${' '.join(["cp '%s' 'in_cond.in/%s/%s.%s' && " % (f, i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
cp '$in_cond.in' 'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)' &&
#end if
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
#if $in_cond.in_select == "no"
${' '.join(["'in_cond.in/%s/%s.%s'"%(i, re.sub('[^\w\-_]', '_', f.element_identifier), $gxy2omsext(f.ext)) for i, f in enumerate($in_cond.in) if f])}
#else
'in_cond.in/${re.sub("[^\w\-_]", "_", $in_cond.in.element_identifier)}.$gxy2omsext($in_cond.in.ext)'
#end if
-out
'out/output.${out_type}'

## Postprocessing
&& mv 'out/output.${out_type}' '$out'
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <conditional name="in_cond">
      <param name="in_select" type="select" label="Run tool in batch mode for -in">
        <option value="no">No: process all datasets jointly</option>
        <option value="yes">Yes: process each dataset in an independent job</option>
      </param>
      <when value="no">
        <param argument="-in" type="data" format="idxml,mzid" multiple="true" label="Input file(s)" help=" select idxml,mzid data sets(s)"/>
      </when>
      <when value="yes">
        <param argument="-in" type="data" format="idxml,mzid" label="Input file(s)" help=" select idxml,mzid data sets(s)"/>
      </when>
    </conditional>
    <param argument="-out_type" type="select" label="Output file type -- default: determined from file extension or content" help="">
      <option value="idXML">idxml</option>
      <option value="mzid">mzid</option>
      <validator type="expression" message="A value needs to be selected">value != "select a value"</validator>
      <expand macro="list_string_san" name="out_type"/>
    </param>
    <param argument="-extra" type="text" optional="true" value="" label="List of the MetaData parameters to be included in a feature set for precolato" help=" (space separated list, in order to allow for spaces in list items surround them by single quotes)">
      <expand macro="list_string_val" name="extra"/>
      <expand macro="list_string_san" name="extra"/>
    </param>
    <param argument="-multiple_search_engines" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Combine PSMs from different search engines by merging on scan level" help=""/>
    <expand macro="adv_opts_macro">
      <param argument="-skip_db_check" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Manual override to skip the check if same settings for multiple search engines were applied" help="Only valid together with -multiple_search_engines flag"/>
      <param argument="-concat" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Naive merging of PSMs from different search engines: concatenate multiple search results instead of merging on scan level" help="Only valid together with -multiple_search_engines flag"/>
      <param argument="-impute" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Will instead of discarding all PSM not unanimously detected by all SE, impute missing values by their respective scores min/max observed" help="Only valid together with -multiple_search_engines flag"/>
      <param argument="-limit_imputation" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Will impute missing scores with the worst numerical limit (instead of min/max observed) of the respective score" help="Only valid together with -multiple_search_engines flag"/>
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <data name="out" label="${tool.name} on ${on_string}: out" format="idxml">
      <change_format>
        <when input="out_type" value="mzid" format="mzid"/>
      </change_format>
    </data>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_PSMFeatureExtractor_1 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="skip_db_check" value="true"/>
        <param name="concat" value="false"/>
        <param name="impute" value="false"/>
        <param name="limit_imputation" value="false"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="MSGFPlusAdapter_1_out.idXML,XTandemAdapter_1_out.idXML"/>
      </conditional>
      <output name="out" value="PSMFeatureExtractor_1_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="out_type" value="idXML"/>
      <param name="multiple_search_engines" value="true"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PSMFeatureExtractor_2 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="skip_db_check" value="true"/>
        <param name="concat" value="false"/>
        <param name="impute" value="false"/>
        <param name="limit_imputation" value="false"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="MSGFPlusAdapter_1_out.idXML,XTandemAdapter_1_out.idXML"/>
      </conditional>
      <output name="out" value="PSMFeatureExtractor_2_out.mzid" compare="sim_size" delta_frac="0.7" ftype="mzid"/>
      <param name="out_type" value="mzid"/>
      <param name="multiple_search_engines" value="true"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
    <!-- TOPP_PSMFeatureExtractor_3 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="skip_db_check" value="false"/>
        <param name="concat" value="false"/>
        <param name="impute" value="false"/>
        <param name="limit_imputation" value="false"/>
        <param name="force" value="false"/>
        <param name="test" value="true"/>
      </section>
      <conditional name="in_cond">
        <param name="in" value="MSGFPlusAdapter_1_out.idXML"/>
      </conditional>
      <output name="out" value="PSMFeatureExtractor_3_out.idXML" compare="sim_size" delta_frac="0.7" ftype="idxml"/>
      <param name="out_type" value="idXML"/>
      <param name="multiple_search_engines" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
      <assert_stdout>
        <has_text_matching expression="@EXECUTABLE@ took .* \(wall\), .* \(CPU\), .* \(system\), .* \(user\)(; Peak Memory Usage: 32 MB)?."/>
      </assert_stdout>
    </test>
  </tests>
  <help><![CDATA[Computes extra features for each input PSM.


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_PSMFeatureExtractor.html]]></help>
  <expand macro="references"/>
</tool>
