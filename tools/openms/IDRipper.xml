<!--This is a configuration file for the integration of a tools into Galaxy (https://galaxyproject.org/). This file was automatically generated using CTDConverter.-->
<!--Proposed Tool Section: [File Filtering / Extraction / Merging]-->
<tool id="IDRipper" name="IDRipper" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="21.05">
  <description>Split protein/peptide identification file into several files according to identification run and annotated file origin</description>
  <macros>
    <token name="@EXECUTABLE@">IDRipper</token>
    <import>macros.xml</import>
  </macros>
  <expand macro="requirements"/>
  <expand macro="stdio"/>
  <command detect_errors="exit_code"><![CDATA[@QUOTE_FOO@
@EXT_FOO@
#import re

## Preprocessing
mkdir in &&
cp '$in' 'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)' &&
mkdir out &&

## Main program call

set -o pipefail &&
@EXECUTABLE@ -write_ctd ./ &&
python3 '$__tool_directory__/fill_ctd.py' '@EXECUTABLE@.ctd' '$args_json' '$hardcoded_json' &&
@EXECUTABLE@ -ini @EXECUTABLE@.ctd
-in
'in/${re.sub("[^\w\-_]", "_", $in.element_identifier)}.$gxy2omsext($in.ext)'
-out
out/

## Postprocessing
#if "ctd_out_FLAG" in $OPTIONAL_OUTPUTS
  && mv '@EXECUTABLE@.ctd' '$ctd_out'
#end if]]></command>
  <configfiles>
    <inputs name="args_json" data_style="paths"/>
    <configfile name="hardcoded_json"><![CDATA[{"log": "log.txt", "threads": "\${GALAXY_SLOTS:-1}", "no_progress": true}]]></configfile>
  </configfiles>
  <inputs>
    <param argument="-in" type="data" format="idxml" label="Input file, in which the protein/peptide identifications must be tagged with 'file_origin'" help=" select idxml data sets(s)"/>
    <param argument="-numeric_filenames" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Do not infer output filenames from spectra_data or file_origin but use the input filename with numeric suffixes" help=""/>
    <param argument="-split_ident_runs" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Split different identification runs into separate files" help=""/>
    <expand macro="adv_opts_macro">
      <param argument="-force" type="boolean" truevalue="true" falsevalue="false" checked="false" label="Overrides tool-specific checks" help=""/>
      <param argument="-test" type="hidden" value="False" label="Enables the test mode (needed for internal use only)" help="" optional="true">
        <expand macro="list_string_san" name="test"/>
      </param>
    </expand>
    <param name="OPTIONAL_OUTPUTS" type="select" optional="true" multiple="true" label="Optional outputs">
      <option value="ctd_out_FLAG">Output used ctd (ini) configuration file</option>
    </param>
  </inputs>
  <outputs>
    <collection type="list" name="out" label="${tool.name} on ${on_string}: out">
      <discover_datasets directory="out" recurse="true" format="idxml" pattern="_?(?P&lt;designation&gt;.*)\.[^.]*"/>
    </collection>
    <data name="ctd_out" format="xml" label="${tool.name} on ${on_string}: ctd">
      <filter>OPTIONAL_OUTPUTS is not None and "ctd_out_FLAG" in OPTIONAL_OUTPUTS</filter>
    </data>
  </outputs>
  <tests>
    <!-- TOPP_IDRipper_1 -->
    <!-- TOPP_IDRipper_2 -->
    <!-- TOPP_IDRipper_2a -->
    <!-- TOPP_IDRipper_3 -->
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="test" value="true"/>
      </section>
      <param name="in" value="IDRipper_1_input.idXML"/>
      <output_collection name="out" count="2">
        <element name="IDRipper_1_output_1" file="IDRipper_1_output1.idXML" ftype="idxml" compare="sim_size" delta="5700"/>
        <element name="IDRipper_1_output_2" file="IDRipper_1_output2.idXML" ftype="idxml" compare="sim_size" delta="5700"/>
      </output_collection>
      <param name="numeric_filenames" value="false"/>
      <param name="split_ident_runs" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
    </test>
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="test" value="true"/>
      </section>
      <param name="in" value="IDRipper_2_input.idXML"/>
      <output_collection name="out" count="3">
        <element name="IDRipper_2_input_idXML_0_0" file="IDRipper_2_input_0_0.idXML" ftype="idxml"/>
        <element name="IDRipper_2_input_idXML_1_0" file="IDRipper_2_input_1_0.idXML" ftype="idxml"/>
        <element name="IDRipper_2_input_idXML_2_1" file="IDRipper_2_input_2_1.idXML" ftype="idxml"/>
      </output_collection>
      <param name="numeric_filenames" value="true"/>
      <param name="split_ident_runs" value="true"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
    </test>
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="test" value="true"/>
      </section>
      <param name="in" value="IDRipper_2_input.idXML"/>
      <output_collection name="out" count="2">
        <element name="IDRipper_2_input_idXML_0" file="IDRipper_2a_output_0.idXML" ftype="idxml"/>
        <element name="IDRipper_2_input_idXML_1" file="IDRipper_2a_output_1.idXML" ftype="idxml"/>
      </output_collection>
      <param name="numeric_filenames" value="true"/>
      <param name="split_ident_runs" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
    </test>
    <test expect_num_outputs="2">
      <section name="adv_opts">
        <param name="test" value="true"/>
      </section>
      <param name="in" value="IDRipper_3_output.idXML"/>
      <output_collection name="out" count="2">
        <element name="IDRipper_3_input1" file="IDRipper_3_input1.idXML" ftype="idxml"/>
        <element name="IDRipper_3_input2" file="IDRipper_3_input2.idXML" ftype="idxml"/>
      </output_collection>
      <param name="numeric_filenames" value="false"/>
      <param name="split_ident_runs" value="false"/>
      <param name="OPTIONAL_OUTPUTS" value="ctd_out_FLAG"/>
      <output name="ctd_out" ftype="xml">
        <assert_contents>
          <is_valid_xml/>
        </assert_contents>
      </output>
    </test>
  </tests>
  <help><![CDATA[Split protein/peptide identification file into several files according to identification run and annotated file origin.


For more information, visit https://openms.de/doxygen/release/3.1.0/html/TOPP_IDRipper.html]]></help>
  <expand macro="references"/>
</tool>
