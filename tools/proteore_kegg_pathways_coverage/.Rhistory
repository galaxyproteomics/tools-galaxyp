library(KEGGREST)
packageVersion("KEGGREST")
##all available pathways for the human
path.hsa<-keggLink("pathway", "hsa")
tot.path.hsa<-unique(path.hsa)
##formating the dat into a list object
##key= pathway ID, value = genes of the pathway in the kegg format
l.hsa<-list()
hsa.path
hsa.path<-keggLink("hsa", "pathway")
for (i in 1:length(tot.path.hsa)){
tmp.ind<-which(names(hsa.path)==tot.path.hsa[i])
l.hsa[[tot.path.hsa[i]]]<-as.vector(hsa.path[tmp.ind])
}
##all available pathways for the human
path.hsa<-keggLink("pathway", "hsa")
tot.path.hsa<-unique(path.hsa)
##formating the dat into a list object
##key= pathway ID, value = genes of the pathway in the kegg format
l.hsa<-list()
hsa.path<-keggLink("hsa", "pathway")
for (i in 1:length(tot.path.hsa)){
tmp.ind<-which(names(hsa.path)==tot.path.hsa[i])
l.hsa[[tot.path.hsa[i]]]<-as.vector(hsa.path[tmp.ind])
}
View(l.hsa)
l.hsa.up<-list()
l.hsa.gene<-list()
for (j in 1:length(l.hsa)) {
l.hsa.up[[names(l.hsa[j])]]<-unique(as.character(keggConv("uniprot", c(l.hsa[[j]]))))
l.hsa.gene[[names(l.hsa[j])]]<-unique(as.character(keggConv("ncbi-geneid", c(l.hsa[[j]]))))
}
l.hsa.up.2<-l.hsa.up
l.hsa.gene.2<-l.hsa.gene
View(l.hsa)
View(l.hsa)
View(l.hsa.gene)
View(l.hsa.gene.2)
View(l.hsa.up)
View(l.hsa.up.2)
save(l.hsa.up.2, file="l.hsa.up.RData")
save(l.hsa.gene.2, file="l.hsa.gene.RData")
View(l.hsa.up.2)
ID2KEGG.Mapping<- function(id.ToMap, idType, org) {
if(org=="Hs"){
if(idType=="UNIPROT"){
load("l.hsa.up.RData")
map<-lapply(l.hsa.up.2, is.element, unique(id.ToMap))
}
else if(idType=="ENTREZ"){
load("l.hsa.gene.RData")
map<-lapply(l.hsa.gene.2, is.element, id.ToMap)
}
else { cat("\n Wrong ID parameter. Has to be UNIPROT or ENTREZ \n\n") }
}#end org=Hs
# else if(org=="Mm"){
#     if(idType=="UNIPROT"){
#         load("l.UP.Mm.RData")
#     map<-lapply(l.UP.Mm, is.element, id.ToMap)
# }
# else if(idType=="ENTREZ"){
#     load("l.EG.Mm.RData")
#     map<-lapply(l.EG.Mm, is.element, id.ToMap)
#
# }
# else { cat("\n Wrong ID parameter. Has to be UNIPROT or ENTREZ \n\n") }
#
#} else { cat("\n Wrong org parameter for the ID2KEGG.Mapping function. possible Value is Hs \n") }
in.path<-sapply(map, function(x) length(which(x==TRUE)))
tot.path<-sapply(map, length)
#in.path[which(in.path!=0)]
#names(in.path[which(in.path!=0)])
#as.numeric(in.path[which(in.path!=0)])
#as.numeric(tot.path[which(in.path!=0)])
ratio<-(as.numeric(in.path[which(in.path!=0)])) / (as.numeric(tot.path[which(in.path!=0)]))
##useful but LONG
## to do before : in step 1
name<-c()
path.names<-names(in.path[which(in.path!=0)])
for (i in 1:length(path.names)) { name[i]<-keggGet(path.names[i])[[1]]$NAME  }
res<-data.frame(I(names(in.path[which(in.path!=0)])), I(name), ratio, as.numeric(in.path[which(in.path!=0)]), as.numeric(tot.path[which(in.path!=0)]))
colnames(res)<-c("pathID", "Desc" , "ratio mapped/total" ,"genes mapped in the path", "tot genes in the path")
return(res)
}
