<tool id="cardinal_group_comparison" name="MSI group comparison" version="3.8.0">
    <description>performs two group comparisons of  mass spectrometry imaging data</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <requirements>
        <requirement type="package" version="3.8.0">bioconductor-cardinal</requirement>
        <requirement type="package" version="2.3">r-gridextra</requirement>
        <requirement type="package" version="4.0.0">r-ggplot2</requirement>
    </requirements>
    <command detect_errors="exit_code">
        <![CDATA[

        @INPUT_LINKING@
        cat '${MSI_segmentation}' &&
        Rscript '${MSI_segmentation}'

    ]]>
    </command>
    <configfiles>
        <configfile name="MSI_segmentation"><![CDATA[


################################# load libraries and read file #########################
library(Cardinal)
library(gridExtra)
library(ggplot2)


@READING_MSIDATA_FULLY_COMPATIBLE@

##msidata = as(msidata, "MSImagingExperiment")

## remove duplicated coordinates
msidata <- msidata[,!duplicated(coord(msidata))]

@DATA_PROPERTIES_INRAM@

#####PDF#####

#if str($type_cond.type_method) == "meansTest":
        Title = "Group Comparison on sample means"

#elif str($type_cond.type_method) == "spatialDGMM_meansTest":
        Title = "Group Comparison on spatial DGMM \n segment means"

#end if

pdf("Group_Comparison.pdf", fonts = "Times", pointsize = 12)
plot(0,type='n',axes=FALSE,ann=FALSE)


title(main=paste0("\n",Title," for file: \n\n", "$infile.display_name"))

##### I summary table #####
## summary table
grid.table(property_df, rows= NULL)

if (npeaks > 0 && NAcount==0){
    opar <- par()

##### II load annotation table and merge with imzML #####
    ## load annotation tabular
    annotation = read.delim("$annotation_file", header = $tabular_header, stringsAsFactors = FALSE)

    #####annot = annotation[,c($annotation_file.column_x, $annotation_file.column_y, $annotation_file.column_group, $annotation_file.column_condition)]
    #####colnames(annot)[1:4] = c("x", "y", "sample", "condition")

    #if str($column_random) == "None":

    annot = annotation[,c($column_x, $column_y, $column_group, $column_condition)]
    colnames(annot)[1:4] = c("x", "y", "sample", "condition")

    #else

    annot = annotation[,c($column_x, $column_y, $column_group, $column_condition, $column_random)]
    colnames(annot)[1:5] = c("x", "y", "sample", "condition", "random")

    #end if

    ## merge with coordinate information of imzML
    coordinates = coord(msidata)
    merged_data = merge(coordinates, annot, by = c("x", "y"), all.x=TRUE, sort = FALSE)

    print(merged_data)

    #if str($column_random) == "None":
        sample_id = merged_data\$sample
        conditions = merged_data\$condition

        msidata\$sample_id = as.factor(sample_id)
        msidata\$condition = as.factor(conditions)

    #else
        sample_id = merged_data\$sample
        conditions = merged_data\$condition
        randoms = merged_data\$random

        msidata\$sample_id = as.factor(sample_id)
        msidata\$condition = as.factor(conditions)
        msidata\$random = as.factor(randoms)

    #end if

##### III overview plots #####
    position_df = as.data.frame(merged_data)


    #if str($column_random) == "None":

        ### plot for sample_id distribution
        plot_samples = ggplot(position_df, aes(x=x, y=y, fill=sample_id))+
               geom_tile() +
               coord_fixed()+
               ggtitle("Distribution of the samples")+
               theme_bw()+
               theme(
               plot.background = element_blank(),
               panel.grid.major = element_blank(),
               panel.grid.minor = element_blank())+
               theme(text=element_text(family="ArialMT", face="bold", size=15))+
               theme(legend.position="bottom",legend.direction="vertical")+
               guides(fill=guide_legend(ncol=4,byrow=TRUE))

        print(plot_samples)

        ### plot for condition
        plot_cond = ggplot(position_df, aes(x=x, y=y, fill=conditions))+
               geom_tile() +
               coord_fixed()+
               ggtitle("Distribution of the Conditions")+
               theme_bw()+
               theme(
               plot.background = element_blank(),
               panel.grid.major = element_blank(),
               panel.grid.minor = element_blank())+
               theme(text=element_text(family="ArialMT", face="bold", size=15))+
               theme(legend.position="bottom",legend.direction="vertical")+
               guides(fill=guide_legend(ncol=4,byrow=TRUE))

        print(plot_cond)

    #else

        ### plot for sample_id distribution
        plot_samples = ggplot(position_df, aes(x=x, y=y, fill=sample_id))+
               geom_tile() +
               coord_fixed()+
               ggtitle("Distribution of the samples")+
               theme_bw()+
               theme(
               plot.background = element_blank(),
               panel.grid.major = element_blank(),
               panel.grid.minor = element_blank())+
               theme(text=element_text(family="ArialMT", face="bold", size=15))+
               theme(legend.position="bottom",legend.direction="vertical")+
               guides(fill=guide_legend(ncol=4,byrow=TRUE))

        print(plot_samples)

        ### plot for condition
        plot_cond = ggplot(position_df, aes(x=x, y=y, fill=conditions))+
               geom_tile() +
               coord_fixed()+
               ggtitle("Distribution of the Conditions")+
               theme_bw()+
               theme(
               plot.background = element_blank(),
               panel.grid.major = element_blank(),
               panel.grid.minor = element_blank())+
               theme(text=element_text(family="ArialMT", face="bold", size=15))+
               theme(legend.position="bottom",legend.direction="vertical")+
               guides(fill=guide_legend(ncol=4,byrow=TRUE))

        print(plot_cond)

        ### plot for random effects
        plot_rand = ggplot(position_df, aes(x=x, y=y, fill=randoms))+
               geom_tile() +
               coord_fixed()+
               ggtitle("Distribution of the Random Effect")+
               theme_bw()+
               theme(
               plot.background = element_blank(),
               panel.grid.major = element_blank(),
               panel.grid.minor = element_blank())+
               theme(text=element_text(family="ArialMT", face="bold", size=15))+
               theme(legend.position="bottom",legend.direction="vertical")+
               guides(fill=guide_legend(ncol=4,byrow=TRUE))

        print(plot_rand)

    #end if

##### III perform meansTest and visualize results #####
    #if str($type_cond.type_method) == "meansTest":
        print("meansTest")

        #if str($column_random) == "None":
            print("test without random effect selected")
            ## perform meansTest without random effect
            mt_res <- meansTest(msidata, fixed= ~condition, samples=msidata\$sample_id)

        #else
            print("test with random effect selected")
            ## perform meansTest with random effect
            mt_res <- meansTest(msidata, fixed= ~condition, random = ~1|random, samples=msidata\$sample_id)

        #end if

    #elif str($type_cond.type_method) == "spatialDGMM_meansTest":
        print("meansTest with spatialDGMM segmentation")

        ## read RData files (MSI and other data) independent of filename
            loadRData <- function(fileName){
            load(fileName)
            get(ls()[ls() != "fileName"])
            }

            dgmm = loadRData("$dgmm_rdata_file")

        #if str($column_random) == "None":
            print("test without random effect selected")

            ## perform meansTest with spatialDGMM
            mt_res <- meansTest(dgmm, fixed = ~condition)

        #else
            print("means test with random effect selected")
            ## perform meansTest with random effect

            mt_res <- meansTest(dgmm, fixed = ~condition, random = ~1|random)
            print("random effect test done")

        #end if

    #end if

    ## filter top ranked features and filter by fdr
    mt_top <- topFeatures(mt_res)

    if (any(mt_top\$fdr < $fdr_filter)) {
      mt_top_fdr <- subset(mt_top, fdr < $fdr_filter)
    } else {
        plot.new()
        text(0.5, 0.5, "No m/z feature with adjusted p value below the fdr filter found. \n Therefore, the selection of interesting m/z features for the boxplots is not possible. \n Repeat with 'Generate boxplots and results table for all m/z features?' set to 'YES' in order to generate boxplots \n for all m/z features or repeat with less strict fdr value.", cex = 0.8)
        print("No m/z feature with adjusted p value below the fdr filter found. Therefore, the selection of interesting m/z features for the boxplots is not possible. Repeat with 'Generate boxplots and results table for all m/z features?' set to 'YES' in order to generate boxplots for all m/z features or repeat with less strict fdr value.")
        mt_top_fdr = data.frame(message = "No m/z feature with adjusted p value below the fdr filter found. Therefore, the selection of interesting m/z features for the boxplots is not possible. Repeat with 'Generate boxplots and results table for all m/z features?' set to 'YES' in order to generate boxplots for all m/z features or repeat with less strict fdr value.", stringsAsFactors = FALSE)
    }

    ## write results tabular file
    write.table(mt_top, file="$mt_results", quote=FALSE, row.names=FALSE, col.names=TRUE, sep="\t")

    #if str($boxplots) == "TRUE":
        interesting_features = sort(mt_top_fdr\$i)
        print(plot(mt_res, i = interesting_features, layout=c(1,1), ylab="Intensity", fill=TRUE))
    #end if
        dev.off()

##### IV customize color selection ##### TO DO customize color selection for user later
        ## colours selection:

	    ###if str($colour_conditional.colour_type) == "manual_colour"
	        ##set $color_string = ','.join(['"%s"' % $color.annotation_color for $color in $colour_conditional.colours])
	        ##colourvector = c($color_string)

	    ###elif str($colour_conditional.colour_type) == "colourpalette"
	        ##number_levels = (length(levels(conditions)))
	        ##colourvector = noquote($colour_conditional.palettes)(number_levels)

	    ###end if


    ## optional output of groupComparison as .RData
    #if str($output_rdata) == "TRUE":
      save(mt_res, file="$groupComparison_rdata")
    #end if



} else {
    plot.new()
    text(0.5, 0.5, "Inputfile has no intensities > 0  \n or contains NA values.", cex = 1.5)
    print("Input file has no intensities > 0 or contains NA values")
    dev.off()
}


    ]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="reading_msidata"/>
        <conditional name="type_cond">
            <param name="type_method" type="select" label="Should the group comparison be performed on the samples means or with spatial DGMM?">
                <option value="meansTest" selected="True">meansTest with sample means</option>
                <option value="spatialDGMM_meansTest">meansTest with spatialDGMM</option>
            </param>
            <when value="meansTest">
            </when>
            <when value="spatialDGMM_meansTest">
                <param name="dgmm_rdata_file" type="data" format="rdata" label="Load spatial DGMM model" help="A spatial DGMM result generated previously with the MSI single ion segmentation tool."/>
            </when>
        </conditional>
        <param name="annotation_file" type="data" format="tabular" label="Load tabular file with pixel coordinates and their classes" help="Four or more columns: x values, y values, sample identifier, condition groups to compare, and optionally a column with random effects"/>
        <param name="column_x" data_ref="annotation_file" label="Column with x values" type="data_column"/>
        <param name="column_y" data_ref="annotation_file" label="Column with y values" type="data_column"/>
        <param name="column_group" data_ref="annotation_file" label="Column with sample identifier" type="data_column" help="This is the sample identifier which will be used to calculate the samples means"/>
        <param name="column_condition" data_ref="annotation_file" label="Column with conditions for group comparison" type="data_column" help="These conditions will be compared"/>
        <param name="column_random" data_ref="annotation_file" optional="True" label="Column with random effects" type="data_column" help="Optionally, random effects can be included in the comparison model."/>
        <param name="tabular_header" type="boolean" label="Tabular files contain a header line" truevalue="TRUE" falsevalue="FALSE"/>
        <param name="fdr_filter" type="float" value="0.05" label="Fdr cutoff - if boxplots are generated then only for features with lower fdr values"/>
        <param name="boxplots" type="boolean" label="Generate boxplots and results table for all m/z features? (If 'No' only fdr filtered m/z features will be plotted and summarizes in a tabular table.)" truevalue="TRUE" falsevalue="FALSE"/>
        <param name="output_rdata" type="boolean" label="Results as .RData output" help="Output of the means test model." truevalue="TRUE" falsevalue="FALSE"/>
    </inputs>
    <outputs>
        <data format="pdf" name="groupComparison_images" from_work_dir="Group_Comparison.pdf" label = "${tool.name} on ${on_string}: results"/>
        <data format="tabular" name="mt_results" label="${tool.name} on ${on_string}: results for all features"/>
        <data format="rdata" name="groupComparison_rdata" label="${tool.name} on ${on_string}: results.RData">
            <filter>output_rdata</filter>
        </data>
    </outputs>
    <tests>
        <test expect_num_outputs="2">
            <param name="infile" value="" ftype="imzml">
                <composite_data value="Combat_40pixel.imzML" />
                <composite_data value="Combat_40pixel.ibd"/>
            </param>
            <conditional name="type_cond">
                <param name="type_method" value="meansTest"/>
            </conditional>
            <param name="annotation_file" value="annotation_40pixel_groupcomparison.tabular" ftype="tabular"/>
            <param name="column_x" value="1"/>
            <param name="column_y" value="2"/>
            <param name="column_group" value="3"/>
            <param name="column_condition" value="4"/>
            <param name="tabular_header" value="TRUE"/>
            <param name="boxplots" value="TRUE"/>
            <output name="groupComparison_images" file="groupcomparison_test1.pdf" compare="sim_size"/>
            <output name="mt_results" file="groupcomparison_test1.tabular"/>
        </test>
        <test expect_num_outputs="3">
            <param name="infile" value="" ftype="imzml">
                <composite_data value="Combat_40pixel.imzML" />
                <composite_data value="Combat_40pixel.ibd"/>
            </param>
            <conditional name="type_cond">
                <param name="type_method" value="meansTest"/>
            </conditional>
            <param name="annotation_file" value="annotation_40pixel_groupcomparison.tabular" ftype="tabular"/>
            <param name="column_x" value="1"/>
            <param name="column_y" value="2"/>
            <param name="column_group" value="3"/>
            <param name="column_condition" value="4"/>
            <param name="column_random" value="5"/>
            <param name="tabular_header" value="TRUE"/>
            <param name="output_rdata" value="TRUE"/>
            <output name="groupComparison_images" file="groupcomparison_test2.pdf" compare="sim_size"/>
            <output name="mt_results" file="groupcomparison_test2.tabular"/>
            <output name="groupComparison_rdata" file="groupcomparison_test2.rdata" compare="sim_size"/>
        </test>
        <test expect_num_outputs="2">
            <param name="infile" value="" ftype="imzml">
                <composite_data value="Combat_40pixel.imzML" />
                <composite_data value="Combat_40pixel.ibd"/>
            </param>
            <conditional name="type_cond">
                <param name="type_method" value="spatialDGMM_meansTest"/>
                <param name="dgmm_rdata_file" value="dgmm_40pixel_groupcomparison.RData" ftype="rdata"/>
            </conditional>
            <param name="annotation_file" value="annotation_40pixel_groupcomparison.tabular" ftype="tabular"/>
            <param name="column_x" value="1"/>
            <param name="column_y" value="2"/>
            <param name="column_group" value="3"/>
            <param name="column_condition" value="4"/>
            <param name="tabular_header" value="TRUE"/>
            <output name="groupComparison_images" file="groupcomparison_test3.pdf" compare="sim_size"/>
            <output name="mt_results" file="groupcomparison_test3.tabular"/>
        </test>
        <test expect_num_outputs="3">
            <param name="infile" value="" ftype="imzml">
                <composite_data value="Combat_40pixel.imzML" />
                <composite_data value="Combat_40pixel.ibd"/>
            </param>
            <conditional name="type_cond">
                <param name="type_method" value="spatialDGMM_meansTest"/>
                <param name="dgmm_rdata_file" value="dgmm_40pixel_groupcomparison.RData" ftype="rdata"/>
            </conditional>
            <param name="annotation_file" value="annotation_40pixel_groupcomparison.tabular" ftype="tabular"/>
            <param name="column_x" value="1"/>
            <param name="column_y" value="2"/>
            <param name="column_group" value="3"/>
            <param name="column_condition" value="4"/>
            <param name="column_random" value="5"/>
            <param name="tabular_header" value="TRUE"/>
            <param name="output_rdata" value="TRUE"/>
            <param name="boxplots" value="TRUE"/>
            <output name="groupComparison_images" file="groupcomparison_test4.pdf" compare="sim_size"/>
            <output name="mt_results" file="groupcomparison_test4.tabular"/>
            <output name="groupComparison_rdata" file="groupcomparison_test4.rdata" compare="sim_size"/>
        </test>
        <test expect_num_outputs="2">
            <param name="infile" value="" ftype="imzml">
                <composite_data value="Combat_40pixel.imzML" />
                <composite_data value="Combat_40pixel.ibd"/>
            </param>
            <conditional name="type_cond">
                <param name="type_method" value="spatialDGMM_meansTest"/>
                <param name="dgmm_rdata_file" value="dgmm_40pixel_groupcomparison.RData" ftype="rdata"/>
            </conditional>
            <param name="annotation_file" value="annotation_40pixel_groupcomparison.tabular" ftype="tabular"/>
            <param name="column_x" value="1"/>
            <param name="column_y" value="2"/>
            <param name="column_group" value="3"/>
            <param name="column_condition" value="4"/>
            <param name="column_random" value="5"/>
            <param name="tabular_header" value="TRUE"/>
            <param name="boxplots" value="FALSE"/>
            <param name="fdr_filter" value="0.001"/>
            <output name="groupComparison_images" file="groupcomparison_test5.pdf" compare="sim_size"/>
            <output name="mt_results" file="groupcomparison_test5.tabular"/>
        </test>
    </tests>
    <help>
        <![CDATA[


@CARDINAL_DESCRIPTION@

-----

This tool performs hypothesis testing for mass spectrometry imaging data. Group comparisons are performed in order to identify whether the abundance of a feature is different between two or more conditions by fitting linear mixed models to sample means or means of segments resulting from spatial DGMM. The model either calls lm() when fitting models with only fixed effects, or lme() when fitting models with fixed and random effects.

@MSIDATA_INPUT_DESCRIPTION@
            - only centroided continuous imzML files are compatible
            - NA intensities are not allowed.
            - duplicated coordinates will be removed.

- Annotation tabular file with sample groups, condition, and optionally random effects for each pixel:
            - Two columns for pixel coordinates (x and y values).
            - One column with the sample identifier to calculate sample means.
            - One column with the condition for the pixel, which will be used for the group comparison.
            - Optionally one column for the random effects that should be included in the comparison model.
            - Sample identifier, condition and random effect columns are treated as factors to perform the group comparison (also when numeric values are provided).
            - The annotation tabular is allowed to have a header line. In this case, set "Tabular file contains a header line" to "Yes".

    ::

     x_coord     y_coord      sample_id    condition        random_effect
        1            1        sample_A      naive               normal
        2            1        sample_A      naive               hypoxia
        3            1        sample_A      treated             normal
        1            2        sample_B      naive               normal
        2            2        sample_B      naive               hypoxia
        3            2        sample_B      treated             normal
       ...
       ...



**Options**

- means Test: fitting linear mixed models to means of sample groups provided by the user.
- means Test with spatial DGMM: fitting linear mixed models to segmentation results based on spatial DGMM (uses the segment means instead of the sample means).


**Tips**

- Only a single input file is accepted, several files have to be combined previously, for example with the MSI combine tool.
- The segmentation function will only run on files with valid intensity values (NA are not allowed).
- It is recommended to use mass spectrometry imaging data that are reduced for the number of m/z features (e.g. after pre-processing, filtered for m/z features of interest).
- For compatibility: if a spatial DGMM object is used for the means test, it needs to be generated with the same tool version as the means test will be performed (tool version 3.6 or higher).


**Output**

- Pdf with boxplots of fdr filtered features boxplots and metadata overview plots.
- Tabular file with results of the linear mixed model for the m/z features (statistics, p value, fdr).
- Optional: RData output to explore the results more deeply with the Cardinal package in R.

        ]]>
    </help>
    <expand macro="citations"/>
</tool>
