<tool id="fragpipe" name="FragPipe -  Academic Research and Education User License (Non-Commercial)" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="24.2">
    <description>Data analysis for mass spectrometry-based proteomics</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>

    <stdio>
        <!-- The error code from individual tools run by FragPipe is not always propogated to the FragPipe process exit code -->
        <regex match="exit code: [^0]"
               source="stdout"
               level="fatal"
               description="A FragPipe pipeline process returned non-zero exit code."/>
    </stdio>
    <version_command>fragpipe --help | grep 'FragPipe v'</version_command>

    <!--
        FragPipe wrapper command:
        - Links input files
        - Modifies database path in workflow file
        - Runs Philosopher to add decoys and contaminants
        - Runs FragPipe, passing paths to MSFragger, Philosopher, Python, and IonQuant
    -->
    <command detect_errors="exit_code"><![CDATA[
        ## Create symlink for workflow output
        ln -s $workflow_configfile fp.workflow;

        ## The user may opt to only output the workflow to review the parameters. If they haven't selected this option, we prepare and run FragPipe.
        #if not $workflow_only
            @PREPARE_ENVIRONMENT@
            @PREPARE_INPUTS@
            @PREPARE_DATABASE@

            mkdir tools &&
            ln -s \${env_location}/share/diatracer-*/diaTracer-*/diaTracer-*.jar tools/ &&
            ln -s \${env_location}/share/ionquant-*/IonQuant-*/IonQuant-*.jar tools/ &&
            ln -s \${env_location}/share/msfragger-*/MSFragger-*/MSFragger-*.jar tools/ &&
            ln -s \${env_location}/share/msfragger-*/MSFragger-*/ext tools/ &&

            ## Run FragPipe
            '$__tool_directory__/fragpipe'
                --msfragger_key f28c4be2-759b0a11-6c1ea652-1240565a
                --ionquant_key b6c0ad83-9a4e8900-3e83d29c-aeba3bfb
                --diatracer_key 8de4daf3-a090ed0d-0acdb00a-1485d8a7
                --headless
                --threads \${GALAXY_SLOTS:-8}
                --ram \$[ \${GALAXY_MEMORY_MB:-8192} / 1024 ]
                --workflow fp.workflow --manifest fp.manifest
                --workdir outputs
                --config-tools-folder tools
                --config-python \$(which python) &&

            @PREPARE_OUTPUTS@
        #end if
    ]]></command>

    <!-- Config file is a FragPipe workflow file -->
    <configfiles>
        <expand macro="workflow_configfile" />
    </configfiles>

    <inputs>
        <!-- License agreements -->
        <expand macro="license_agreements"/>

        <!-- Input scan samples -->
        <expand macro="samples"/>

        <!-- Searched database -->
        <expand macro="fragger_database"/>

        <!-- Workflow input, if the user chooses to re-use existing FragPipe workflow. -->
        <expand macro="workflow"/>

        <!-- Only generate a workflow, don't run FragPipe -->
        <param name="workflow_only" type="boolean" truevalue="yes" falsevalue="no" checked="false" label="Only generate the workflow output"/>

        <param name="output_options" label="Additional outputs" type="select" multiple="true" display="checkboxes" optional="true">
            <option value="workflow">FragPipe Workflow</option>
            <option value="log">FragPipe Log</option>
            <option value="combined_outputs">FragPipe Combined Outputs</option>
            <option value="concatenated_outputs">TSV Outputs Concatenated</option>
            <option value="individual_outputs">Individual Experiment Outputs</option>
        </param>
    </inputs>

    <outputs>
        <!-- Workflow file used by FragPipe -->
        <data name="output_workflow" format="txt" label="FragPipe workflow" from_work_dir="fp.workflow">
            <filter>workflow_only or (output_options and 'workflow' in output_options)</filter>
        </data>
        <!-- FragPipe log -->
        <data name="log" format="txt" label="FragPipe log.txt" from_work_dir="outputs/log_*.txt">
            <filter>not workflow_only and output_options and 'log' in output_options</filter>
        </data>

        <!-- DIA-NN Quant -->
        <data name="diaquant_msstats_csv" format="csv" label="FragPipe DIA-NN Quant msstats.csv" from_work_dir="outputs/dia-quant-output/msstats.csv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_msstats_ptm_csv" format="csv" label="FragPipe DIA-NN Quant msstats_ptm.csv" from_work_dir="outputs/dia-quant-output/msstats_ptm.csv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_tsv_speclib" format="txt" label="FragPipe DIA-NN Quant report-tsv.speclib" from_work_dir="outputs/dia-quant-output/report-tsv.speclib">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_gg_matrix_tsv" format="tsv" label="FragPipe DIA-NN Quant report.gg_matrix.tsv" from_work_dir="outputs/dia-quant-output/report.gg_matrix.tsv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_log_txt" format="txt" label="FragPipe DIA-NN Quant report.log.txt" from_work_dir="outputs/dia-quant-output/report.log.txt">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_pg_matrix_tsv" format="tsv" label="FragPipe DIA-NN Quant report.pg_matrix.tsv" from_work_dir="outputs/dia-quant-output/report.pg_matrix.tsv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_pr_matrix_tsv" format="tsv" label="FragPipe DIA-NN Quant report.pr_matrix.tsv" from_work_dir="outputs/dia-quant-output/report.pr_matrix.tsv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_stats_tsv" format="tsv" label="FragPipe DIA-NN Quant report.stats.tsv" from_work_dir="outputs/dia-quant-output/report.stats.tsv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_tsv" format="tsv" label="FragPipe DIA-NN Quant report.tsv" from_work_dir="outputs/dia-quant-output/report.tsv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>
        <data name="diaquant_report_unique_genes_matrix_tsv" format="tsv" label="FragPipe DIA-NN Quant report.unique_genes_matrix.tsv" from_work_dir="outputs/dia-quant-output/report.unique_genes_matrix.tsv">
            <filter>(not workflow_only) and ('DIA_SpecLib_Quant' in wf['workflow_name'])</filter>
        </data>


        <!-- Collection outputs comprised of separate results for different experiments -->
        <collection name="output_psm" type="list" label="FragPipe psm.tsv" >
            <filter>not workflow_only and 'individual_outputs' in output_options</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.psm.tsv)" ext="tabular" directory="outputs"/>
        </collection>
        <collection name="output_ion" type="list" label="FragPipe ion.tsv" >
            <filter>not workflow_only and 'individual_outputs' in output_options</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.ion.tsv)" ext="tabular" directory="outputs"/>
        </collection>
        <collection name="output_peptide" type="list" label="FragPipe peptide.tsv" >
            <filter>not workflow_only and 'individual_outputs' in output_options</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.peptide.tsv)" ext="tabular" directory="outputs"/>
        </collection>
        <collection name="output_protein" type="list" label="FragPipe protein.tsv" >
            <filter>not workflow_only and 'individual_outputs' in output_options</filter>
            <discover_datasets pattern="(?P&lt;designation&gt;.+\.protein.tsv)" ext="tabular" directory="outputs"/>
        </collection>

        <!-- Combined results from all experimental groups -->
        <collection name="combined_outputs" type="list" label="FragPipe Combined Outputs" >
            <filter>not workflow_only and output_options and 'combined_outputs' in output_options</filter>
            <discover_datasets pattern="__designation__" ext="tabular" directory="outputs/combined_outputs"/>
        </collection>

        <!-- Galaxy-wrapper concatenated results -->
        <data name="concat_psm_tsv" format="tabular" label="FragPipe Concatenated psm.tsv" from_work_dir="outputs/concat_psm.tsv">
            <filter>not workflow_only and 'concatenated_outputs' in output_options</filter>
        </data>
        <data name="concat_ion_tsv" format="tabular" label="FragPipe Concatenated ion.tsv" from_work_dir="outputs/concat_ion.tsv">
            <filter>not workflow_only and 'concatenated_outputs' in output_options</filter>
        </data>
        <data name="concat_peptide_tsv" format="tabular" label="FragPipe Concatenated peptide.tsv" from_work_dir="outputs/concat_peptide.tsv">
            <filter>not workflow_only and 'concatenated_outputs' in output_options</filter>
        </data>
        <data name="concat_protein_tsv" format="tabular" label="FragPipe Concatenated protein.tsv" from_work_dir="outputs/concat_protein.tsv">
            <filter>not workflow_only and 'concatenated_outputs' in output_options</filter>
        </data>

        <!-- PTM-Shepherd Results -->
        <data name="global_profile_tsv" format="tabular" label="FragPipe global.profile.tsv" from_work_dir="outputs/ptm-shepherd-output/global.profile.tsv">
               <filter>(not workflow_only) and ('Open' in  wf['workflow_name'])</filter>
        </data>
        <data name="global_summary_tsv" format="tabular" label="FragPipe global.modsummary.tsv" from_work_dir="outputs/ptm-shepherd-output/global.modsummary.tsv">
               <filter>(not workflow_only) and ('Open' in  wf['workflow_name'])</filter>
        </data>

        <!--
            TMT/iTRAW Results
            Only produced by TMT, TRAQ, and SLC workflows
        -->
        <collection name="tmt_results" type="list" label="FragPipe TMT Results" >
            <discover_datasets pattern="__designation__" ext="tabular" directory="outputs/tmt-report"/>
            <filter>(not workflow_only) and ('TMT' in wf['workflow_name'])</filter>
        </collection>
    </outputs>

    <tests>
      <test expect_num_outputs="11">
        <param name="inputs" value="basic-search/test1.mzML,basic-search/test2.mzML" ftype="mzml"/>
        <param name="database_name" value="basic-search/test.fasta" ftype="fasta"/>
        <param name="manifest" value="basic-search/test.manifest" ftype="tabular"/>
        <param name="wf|workflow_name" value="Basic-Search"/>
        <param name="output_options" value="workflow,log,combined_outputs,concatenated_outputs,individual_outputs"/>
        <param name="license_agreements" value="true"/>
        <param name="wf|validation|validation_tab|psm_validation|run_psm_validation" value="percolator"/>
        <output name="concat_psm_tsv" ftype="tabular">
            <assert_contents>
                <has_text text="Experiment&#x9;Spectrum&#x9;Spectrum File"/>
                <has_text text="sample1"/>
                <has_text text="sample2"/>
            </assert_contents>
        </output>
        <output name="concat_ion_tsv" ftype="tabular">
            <assert_contents>
                <has_text text="Experiment&#x9;Peptide Sequence&#x9;Modified Sequence"/>
                <has_text text="sample1"/>
                <has_text text="sample2"/>
            </assert_contents>
        </output>
        <output name="concat_peptide_tsv" ftype="tabular">
            <assert_contents>
                <has_text text="Experiment&#x9;Peptide&#x9;Prev AA&#x9;"/>
                <has_text text="sample1"/>
                <has_text text="sample2"/>
            </assert_contents>
        </output>
        <output name="concat_protein_tsv" ftype="tabular">
            <assert_contents>
                <has_text text="Experiment&#x9;Protein&#x9;Protein ID&#x9;"/>
                <has_text text="sample1"/>
                <has_text text="sample2"/>
            </assert_contents>
        </output>
        <output name="output_workflow" ftype="txt" file="basic-search/outputs/workflow.txt" compare="contains"/>
        <output name="log" ftype="txt">
            <assert_contents>
                <has_text text="FragPipe version 23.0"/>
            </assert_contents>
        </output>
        <output_collection name="combined_outputs" type="list">
            <element name="combined_protein.tsv" ftype="tabular">
                <assert_contents>
                    <has_text text="Protein&#x9;Protein ID&#x9;Entry Name"/>
                </assert_contents>
            </element>
        </output_collection>
      </test>
      <test expect_num_outputs="7">
        <param name="inputs" value="basic-search/test1.mzML,basic-search/test2.mzML" ftype="mzml"/>
        <param name="database_name" value="basic-search/test.fasta" ftype="fasta"/>
        <param name="manifest" value="basic-search/test.manifest" ftype="tabular"/>
        <param name="wf|workflow_name" value="Nonspecific-HLA"/>
        <param name="output_options" value="workflow,log,combined_outputs,concatenated_outputs"/>
        <param name="license_agreements" value="true"/>
        <output name="output_workflow" ftype="txt" file="nonspecific-hla/outputs/workflow.txt" compare="contains"/>
        <output name="concat_protein_tsv" ftype="tabular">
            <assert_contents>
                <has_text text="sample1"/>
                <!-- Check for match from decoy_and_contam option -->
                <has_text text="sp|P10636|TAU_HUMAN"/>
            </assert_contents>
        </output>
      </test>
      <test expect_num_outputs="1">
        <param name="inputs" value="tmt11/test1.mzML,tmt11/test2.mzML" ftype="mzml"/>
        <param name="database_name" value="tmt11/test.fasta" ftype="fasta"/>
        <param name="manifest" value="tmt11/test.manifest" ftype="tabular"/>
        <param name="wf|annotation" value="tmt11/test.annotation" ftype="tabular"/>
        <param name="wf|workflow_name" value="TMT11"/>
        <param name="output_options" value="workflow"/>
        <param name="license_agreements" value="true"/>
        <param name="workflow_only" value="true"/>
        <output name="output_workflow" ftype="txt" file="tmt11/outputs/workflow.txt" compare="contains"/>
      </test>
    </tests>

    <help><![CDATA[
**FragPipe**

FragPipe_ is a suite of computational tools enabling comprehensive analysis of mass spectrometry-based proteomics data.
FragPipe uses MSFragger_ - an ultrafast proteomic search engine suitable for both conventional and “open” (wide precursor mass tolerance) peptide identification.

Each FragPipe job is configured around a user-selected FragPipe _workflow.
Blank optional parameters in the Galaxy tool will default to the settings in the selected FragPipe workflow file.

**License Agreements**

    @LICENSE_AGREEMENTS@

.. _FragPipe: https://fragpipe.nesvilab.org
.. _MSFragger: https://msfragger.nesvilab.org
.. _workflow: https://fragpipe.nesvilab.org/docs/tutorial_fragpipe_workflows.html

    ]]></help>
    <expand macro="citations" />
</tool>
